
ME-507-Lab-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800700c  0800700c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007014  08007014  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007014  08007014  00008014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800701c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08007084  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007084  000092b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cab  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ed  00000000  00000000  0001ad43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8c  00000000  00000000  0001e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fbb  00000000  00000000  0001f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001390c  00000000  00000000  00047097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f44ff  00000000  00000000  0005a9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014eea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  0014eee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00153c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b90 	.word	0x08006b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006b90 	.word	0x08006b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b0ce      	sub	sp, #312	@ 0x138
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 feed 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 fa67 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fb9b 	bl	8000cb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 fb69 	bl	8000c58 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000586:	f000 fab3 	bl	8000af0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Helpful vars
  uint32_t len = 0; 						// Message length for UART
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  char rcv[100] = ""; 						// Received characters buffer
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000596:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800059a:	2260      	movs	r2, #96	@ 0x60
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fb0b 	bl	8005bba <memset>
  char msg[100] = "";						// Message to transmit over UART
 80005a4:	2300      	movs	r3, #0
 80005a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80005a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005ac:	2260      	movs	r2, #96	@ 0x60
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 fb02 	bl	8005bba <memset>
  char frown[17] = "Invalid command.";		// Error message
 80005b6:	4bd1      	ldr	r3, [pc, #836]	@ (80008fc <main+0x38c>)
 80005b8:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	682b      	ldr	r3, [r5, #0]
 80005c4:	7023      	strb	r3, [r4, #0]
  char dutychar[3] = ""; 					// Store slice of command containing duty
 80005c6:	4bce      	ldr	r3, [pc, #824]	@ (8000900 <main+0x390>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80005ce:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]
  char * dutychk1; 							// Ptr for checking duty char within 0-F
  char * dutychk2;							// Same as above for second digit
  char hexvalid[17] = "0123456789ABCDEF";	// List of valid duty chars
 80005d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80005da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005de:	4ac9      	ldr	r2, [pc, #804]	@ (8000904 <main+0x394>)
 80005e0:	461c      	mov	r4, r3
 80005e2:	4615      	mov	r5, r2
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	682b      	ldr	r3, [r5, #0]
 80005ea:	7023      	strb	r3, [r4, #0]
  char motchar[2] = "";						// Store slice of command containing motor select
 80005ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80005f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005f4:	2200      	movs	r2, #0
 80005f6:	801a      	strh	r2, [r3, #0]
  int8_t commduty; 							// Parse integer duty from motchar

  // Start timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	48c3      	ldr	r0, [pc, #780]	@ (8000908 <main+0x398>)
 80005fc:	f002 fe14 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000600:	2104      	movs	r1, #4
 8000602:	48c1      	ldr	r0, [pc, #772]	@ (8000908 <main+0x398>)
 8000604:	f002 fe10 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000608:	2108      	movs	r1, #8
 800060a:	48bf      	ldr	r0, [pc, #764]	@ (8000908 <main+0x398>)
 800060c:	f002 fe0c 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000610:	210c      	movs	r1, #12
 8000612:	48bd      	ldr	r0, [pc, #756]	@ (8000908 <main+0x398>)
 8000614:	f002 fe08 	bl	8003228 <HAL_TIM_PWM_Start>

  // Make motors and disable them
  Motor_Str Spool_Mot =  {.duty           = 0,
 8000618:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800061c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000620:	4aba      	ldr	r2, [pc, #744]	@ (800090c <main+0x39c>)
 8000622:	461c      	mov	r4, r3
 8000624:	4613      	mov	r3, r2
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                          .enable         = 0,
                          .timer          = &htim1,
                          .ChannelPair    = 1};
  motor_disable(&Spool_Mot);
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fc69 	bl	8000f08 <motor_disable>
  Motor_Str Table_Mot =  {.duty           = 0,
 8000636:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800063a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800063e:	4ab4      	ldr	r2, [pc, #720]	@ (8000910 <main+0x3a0>)
 8000640:	461c      	mov	r4, r3
 8000642:	4613      	mov	r3, r2
 8000644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                          .enable         = 0,
                          .timer          = &htim1,
                          .ChannelPair    = 2};
  motor_disable(&Table_Mot);
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fc5a 	bl	8000f08 <motor_disable>

  // Print to the console so we can see what's happening
  HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f000 fef9 	bl	800144c <HAL_Delay>
  len = sprintf(&msg,"Powering on. Motors disabled.\r\nTimer 1 compare registers:\r\nCCR1: %ld\r\nCCR2: %ld\r\nCCR3: %ld\r\nCCR4: %ld\r\n", htim1.Instance->CCR1, htim1.Instance->CCR2, htim1.Instance->CCR3, htim1.Instance->CCR4);
 800065a:	4bab      	ldr	r3, [pc, #684]	@ (8000908 <main+0x398>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000660:	4ba9      	ldr	r3, [pc, #676]	@ (8000908 <main+0x398>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8000666:	4ba8      	ldr	r3, [pc, #672]	@ (8000908 <main+0x398>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800066c:	4aa6      	ldr	r2, [pc, #664]	@ (8000908 <main+0x398>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000672:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4623      	mov	r3, r4
 800067c:	460a      	mov	r2, r1
 800067e:	49a5      	ldr	r1, [pc, #660]	@ (8000914 <main+0x3a4>)
 8000680:	f005 fa38 	bl	8005af4 <siprintf>
 8000684:	4603      	mov	r3, r0
 8000686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  HAL_UART_Transmit_IT(&huart2, &msg, len);
 800068a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800068e:	b29a      	uxth	r2, r3
 8000690:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000694:	4619      	mov	r1, r3
 8000696:	48a0      	ldr	r0, [pc, #640]	@ (8000918 <main+0x3a8>)
 8000698:	f003 fcca 	bl	8004030 <HAL_UART_Transmit_IT>
  HAL_Delay(200);
 800069c:	20c8      	movs	r0, #200	@ 0xc8
 800069e:	f000 fed5 	bl	800144c <HAL_Delay>
  memset(&msg, '\0', 100);
 80006a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006a6:	2264      	movs	r2, #100	@ 0x64
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 fa85 	bl	8005bba <memset>

  // Enable motors
  motor_enable(&Spool_Mot);
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fbf5 	bl	8000ea4 <motor_enable>
  motor_enable(&Table_Mot);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fbf0 	bl	8000ea4 <motor_enable>
  len = sprintf(&msg,"Motors enabled.\r\nTimer 1 compare registers:\r\nCCR1: %ld\r\nCCR2: %ld\r\nCCR3: %ld\r\nCCR4: %ld\r\n", htim1.Instance->CCR1, htim1.Instance->CCR2, htim1.Instance->CCR3, htim1.Instance->CCR4);
 80006c4:	4b90      	ldr	r3, [pc, #576]	@ (8000908 <main+0x398>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80006ca:	4b8f      	ldr	r3, [pc, #572]	@ (8000908 <main+0x398>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80006d0:	4b8d      	ldr	r3, [pc, #564]	@ (8000908 <main+0x398>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006d6:	4a8c      	ldr	r2, [pc, #560]	@ (8000908 <main+0x398>)
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80006dc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80006e0:	9201      	str	r2, [sp, #4]
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	4623      	mov	r3, r4
 80006e6:	460a      	mov	r2, r1
 80006e8:	498c      	ldr	r1, [pc, #560]	@ (800091c <main+0x3ac>)
 80006ea:	f005 fa03 	bl	8005af4 <siprintf>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  HAL_UART_Transmit_IT(&huart2, &msg, len);
 80006f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006fe:	4619      	mov	r1, r3
 8000700:	4885      	ldr	r0, [pc, #532]	@ (8000918 <main+0x3a8>)
 8000702:	f003 fc95 	bl	8004030 <HAL_UART_Transmit_IT>
  HAL_Delay(200);
 8000706:	20c8      	movs	r0, #200	@ 0xc8
 8000708:	f000 fea0 	bl	800144c <HAL_Delay>
  memset(&msg, '\0', 100);
 800070c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000710:	2264      	movs	r2, #100	@ 0x64
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f005 fa50 	bl	8005bba <memset>
  //motor_set_duty(&Spool_Mot, +10);
  //motor_set_duty(&Table_Mot, -20);
  //len = sprintf(&msg,"Contents of htim1:\r\nCCR1: %ld\r\nCCR2: %ld\r\nCCR3: %ld\r\nCCR4: %ld\r\n", htim1.Instance->CCR1, htim1.Instance->CCR2, htim1.Instance->CCR3, htim1.Instance->CCR4);

  // Prompt user to enter commands
  len = sprintf(&msg,"Commands enabled. Enter using format <Mnxy>\r\nn = 1 | 2 (motor sel)\r\nxy = 00-FF (0x duty cycle)\r\n\n");
 800071a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800071e:	4980      	ldr	r1, [pc, #512]	@ (8000920 <main+0x3b0>)
 8000720:	4618      	mov	r0, r3
 8000722:	f005 f9e7 	bl	8005af4 <siprintf>
 8000726:	4603      	mov	r3, r0
 8000728:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  HAL_UART_Transmit_IT(&huart2, &msg, len);
 800072c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000730:	b29a      	uxth	r2, r3
 8000732:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000736:	4619      	mov	r1, r3
 8000738:	4877      	ldr	r0, [pc, #476]	@ (8000918 <main+0x3a8>)
 800073a:	f003 fc79 	bl	8004030 <HAL_UART_Transmit_IT>
  HAL_Delay(200);
 800073e:	20c8      	movs	r0, #200	@ 0xc8
 8000740:	f000 fe84 	bl	800144c <HAL_Delay>
  memset(&msg, '\0', 100);
 8000744:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000748:	2264      	movs	r2, #100	@ 0x64
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 fa34 	bl	8005bba <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Receive characters over UART
	HAL_UART_Receive_IT(&huart2, &buff, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	4973      	ldr	r1, [pc, #460]	@ (8000924 <main+0x3b4>)
 8000756:	4870      	ldr	r0, [pc, #448]	@ (8000918 <main+0x3a8>)
 8000758:	f003 fcc8 	bl	80040ec <HAL_UART_Receive_IT>
	// When a character comes in over UART
	if (rcvflg == 1){
 800075c:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <main+0x3b8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b01      	cmp	r3, #1
 8000764:	d1f5      	bne.n	8000752 <main+0x1e2>
		// Push the new character into rcv
		strcat(&rcv, &buff);
 8000766:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800076a:	496e      	ldr	r1, [pc, #440]	@ (8000924 <main+0x3b4>)
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fa2c 	bl	8005bca <strcat>
		// Get the length of rcv
		len = strlen(rcv);
 8000772:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fd2a 	bl	80001d0 <strlen>
 800077c:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		// Trigger on return key
		if (rcv[len-1] == '\r'){
 8000780:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000784:	3b01      	subs	r3, #1
 8000786:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800078a:	f107 0208 	add.w	r2, r7, #8
 800078e:	4413      	add	r3, r2
 8000790:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000794:	2b0d      	cmp	r3, #13
 8000796:	f040 811c 	bne.w	80009d2 <main+0x462>
			// Validate correct command format
			// Correct format
			if (rcv[0] == 'M' && len == 5){
 800079a:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800079e:	2b4d      	cmp	r3, #77	@ 0x4d
 80007a0:	f040 80ef 	bne.w	8000982 <main+0x412>
 80007a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	f040 80ea 	bne.w	8000982 <main+0x412>
				// Parse command string
				motchar[0] = rcv[1];
 80007ae:	f897 20bd 	ldrb.w	r2, [r7, #189]	@ 0xbd
 80007b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80007ba:	701a      	strb	r2, [r3, #0]
				dutychar[0] = rcv[2];
 80007bc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 80007c0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
				dutychk1 = strchr(hexvalid, dutychar[0]);
 80007c4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007c8:	461a      	mov	r2, r3
 80007ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 fa09 	bl	8005be8 <strchr>
 80007d6:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
				dutychar[1] = rcv[3];
 80007da:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80007de:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
				dutychk2 = strchr(hexvalid, dutychar[1]);
 80007e2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80007e6:	461a      	mov	r2, r3
 80007e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 f9fa 	bl	8005be8 <strchr>
 80007f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
				commduty = strtol(&dutychar, NULL, 16);
 80007f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007fc:	2210      	movs	r2, #16
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f005 f899 	bl	8005938 <strtol>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
				// Scale duty cycle
				if (commduty < 0){
 800080c:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 8000810:	2b00      	cmp	r3, #0
 8000812:	da15      	bge.n	8000840 <main+0x2d0>
					commduty = (int8_t) ((float)commduty / 128 * 100);
 8000814:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000820:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800092c <main+0x3bc>
 8000824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000828:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000930 <main+0x3c0>
 800082c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000834:	edc7 7a01 	vstr	s15, [r7, #4]
 8000838:	793b      	ldrb	r3, [r7, #4]
 800083a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
 800083e:	e014      	b.n	800086a <main+0x2fa>
				} else {
					commduty = (int8_t) ((float)commduty / 127 * 100);
 8000840:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800084c:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8000934 <main+0x3c4>
 8000850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000854:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000930 <main+0x3c0>
 8000858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000860:	edc7 7a01 	vstr	s15, [r7, #4]
 8000864:	793b      	ldrb	r3, [r7, #4]
 8000866:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
				}
				// Choose requested motor and validate duty
				if (motchar[0] == '1' && dutychk1 != NULL && dutychk2 != NULL){
 800086a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800086e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b31      	cmp	r3, #49	@ 0x31
 8000876:	d11c      	bne.n	80008b2 <main+0x342>
 8000878:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800087c:	2b00      	cmp	r3, #0
 800087e:	d018      	beq.n	80008b2 <main+0x342>
 8000880:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000884:	2b00      	cmp	r3, #0
 8000886:	d014      	beq.n	80008b2 <main+0x342>
					// Send duty cycle to spool motor
					motor_set_duty(&Spool_Mot, commduty);
 8000888:	f997 212b 	ldrsb.w	r2, [r7, #299]	@ 0x12b
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fa92 	bl	8000dbc <motor_set_duty>
					len = sprintf(&msg, "\nSetting spool motor (%s) to %d percent duty\r\n", motchar, commduty);
 8000898:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 800089c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008a0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008a4:	4924      	ldr	r1, [pc, #144]	@ (8000938 <main+0x3c8>)
 80008a6:	f005 f925 	bl	8005af4 <siprintf>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80008b0:	e066      	b.n	8000980 <main+0x410>
				} else if (motchar[0] == '2' && dutychk1 != NULL && dutychk2 != NULL){
 80008b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80008b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b32      	cmp	r3, #50	@ 0x32
 80008be:	d13f      	bne.n	8000940 <main+0x3d0>
 80008c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d03b      	beq.n	8000940 <main+0x3d0>
 80008c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d037      	beq.n	8000940 <main+0x3d0>
					// Send duty cycle to table motor
					motor_set_duty(&Table_Mot, commduty);
 80008d0:	f997 212b 	ldrsb.w	r2, [r7, #299]	@ 0x12b
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fa6e 	bl	8000dbc <motor_set_duty>
					len = sprintf(&msg, "\nSetting table motor (%s) to %d percent duty\r\n", motchar, commduty);
 80008e0:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 80008e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008e8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008ec:	4913      	ldr	r1, [pc, #76]	@ (800093c <main+0x3cc>)
 80008ee:	f005 f901 	bl	8005af4 <siprintf>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80008f8:	e042      	b.n	8000980 <main+0x410>
 80008fa:	bf00      	nop
 80008fc:	08006dec 	.word	0x08006dec
 8000900:	08006e00 	.word	0x08006e00
 8000904:	08006e04 	.word	0x08006e04
 8000908:	20000084 	.word	0x20000084
 800090c:	08006e18 	.word	0x08006e18
 8000910:	08006e28 	.word	0x08006e28
 8000914:	08006ba8 	.word	0x08006ba8
 8000918:	200000d0 	.word	0x200000d0
 800091c:	08006c10 	.word	0x08006c10
 8000920:	08006c6c 	.word	0x08006c6c
 8000924:	20000159 	.word	0x20000159
 8000928:	20000158 	.word	0x20000158
 800092c:	43000000 	.word	0x43000000
 8000930:	42c80000 	.word	0x42c80000
 8000934:	42fe0000 	.word	0x42fe0000
 8000938:	08006cd0 	.word	0x08006cd0
 800093c:	08006d00 	.word	0x08006d00
				} else if (dutychk1 == NULL || dutychk2 == NULL){
 8000940:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <main+0x3e0>
 8000948:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10b      	bne.n	8000968 <main+0x3f8>
					// Invalid duty cycle
					len = sprintf(&msg, "\n%s Valid duty cycle is a hex number 00-FF.\r\n", frown);
 8000950:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000954:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000958:	4935      	ldr	r1, [pc, #212]	@ (8000a30 <main+0x4c0>)
 800095a:	4618      	mov	r0, r3
 800095c:	f005 f8ca 	bl	8005af4 <siprintf>
 8000960:	4603      	mov	r3, r0
 8000962:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000966:	e00b      	b.n	8000980 <main+0x410>
				} else {
					// Invalid motor number
					len = sprintf(&msg, "\n%s Valid motor args are 1 and 2.\r\n", frown);
 8000968:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800096c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000970:	4930      	ldr	r1, [pc, #192]	@ (8000a34 <main+0x4c4>)
 8000972:	4618      	mov	r0, r3
 8000974:	f005 f8be 	bl	8005af4 <siprintf>
 8000978:	4603      	mov	r3, r0
 800097a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
			if (rcv[0] == 'M' && len == 5){
 800097e:	e00b      	b.n	8000998 <main+0x428>
 8000980:	e00a      	b.n	8000998 <main+0x428>
				}
			// Wrong size input or didn't start with 'M'
			} else {
				// Set message to frown
				len = sprintf(&msg, "\n%s Did you backspace?\r\n", frown);
 8000982:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000986:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800098a:	492b      	ldr	r1, [pc, #172]	@ (8000a38 <main+0x4c8>)
 800098c:	4618      	mov	r0, r3
 800098e:	f005 f8b1 	bl	8005af4 <siprintf>
 8000992:	4603      	mov	r3, r0
 8000994:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
			}
			// Send command result message to terminal
			HAL_Delay(50);
 8000998:	2032      	movs	r0, #50	@ 0x32
 800099a:	f000 fd57 	bl	800144c <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, &msg, len);
 800099e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009a8:	4619      	mov	r1, r3
 80009aa:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <main+0x4cc>)
 80009ac:	f003 fb40 	bl	8004030 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 80009b0:	2032      	movs	r0, #50	@ 0x32
 80009b2:	f000 fd4b 	bl	800144c <HAL_Delay>
			memset(&msg, '\0', 100);
 80009b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009ba:	2264      	movs	r2, #100	@ 0x64
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 f8fb 	bl	8005bba <memset>
			memset(&rcv, '\0', 100); // Clear the receive buffer!
 80009c4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80009c8:	2264      	movs	r2, #100	@ 0x64
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 f8f4 	bl	8005bba <memset>
		}
		// Lower the character received flag
		rcvflg = 0;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <main+0x4d0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
		// Update htim1 display in terminal
		len = sprintf(&msg,"Timer 1 compare registers:\r\nCCR1: %ld\r\nCCR2: %ld\r\nCCR3: %ld\r\nCCR4: %ld\r\n\n", htim1.Instance->CCR1, htim1.Instance->CCR2, htim1.Instance->CCR3, htim1.Instance->CCR4);
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <main+0x4d4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <main+0x4d4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <main+0x4d4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009ea:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <main+0x4d4>)
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80009f0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80009f4:	9201      	str	r2, [sp, #4]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4623      	mov	r3, r4
 80009fa:	460a      	mov	r2, r1
 80009fc:	4912      	ldr	r1, [pc, #72]	@ (8000a48 <main+0x4d8>)
 80009fe:	f005 f879 	bl	8005af4 <siprintf>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		HAL_UART_Transmit_IT(&huart2, &msg, len);
 8000a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a12:	4619      	mov	r1, r3
 8000a14:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <main+0x4cc>)
 8000a16:	f003 fb0b 	bl	8004030 <HAL_UART_Transmit_IT>
		HAL_Delay(50);
 8000a1a:	2032      	movs	r0, #50	@ 0x32
 8000a1c:	f000 fd16 	bl	800144c <HAL_Delay>
		memset(&msg, '\0', 100);
 8000a20:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a24:	2264      	movs	r2, #100	@ 0x64
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 f8c6 	bl	8005bba <memset>
	HAL_UART_Receive_IT(&huart2, &buff, 1);
 8000a2e:	e690      	b.n	8000752 <main+0x1e2>
 8000a30:	08006d30 	.word	0x08006d30
 8000a34:	08006d60 	.word	0x08006d60
 8000a38:	08006d84 	.word	0x08006d84
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	20000158 	.word	0x20000158
 8000a44:	20000084 	.word	0x20000084
 8000a48:	08006da0 	.word	0x08006da0

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	@ 0x58
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2244      	movs	r2, #68	@ 0x44
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 f8ad 	bl	8005bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a72:	f001 f86f 	bl	8001b54 <HAL_PWREx_ControlVoltageScaling>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a7c:	f000 f998 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f8a6 	bl	8001c00 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aba:	f000 f979 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fc6e 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 f965 	bl	8000db0 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3758      	adds	r7, #88	@ 0x58
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b096      	sub	sp, #88	@ 0x58
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	222c      	movs	r2, #44	@ 0x2c
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f005 f84c 	bl	8005bba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b22:	4b4b      	ldr	r3, [pc, #300]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b24:	4a4b      	ldr	r2, [pc, #300]	@ (8000c54 <MX_TIM1_Init+0x164>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b28:	4b49      	ldr	r3, [pc, #292]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b48      	ldr	r3, [pc, #288]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b34:	4b46      	ldr	r3, [pc, #280]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b44      	ldr	r3, [pc, #272]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b42:	4b43      	ldr	r3, [pc, #268]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b4e:	4840      	ldr	r0, [pc, #256]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b50:	f002 fb12 	bl	8003178 <HAL_TIM_PWM_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 f929 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4837      	ldr	r0, [pc, #220]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000b72:	f003 f909 	bl	8003d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b7c:	f000 f918 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b80:	2360      	movs	r3, #96	@ 0x60
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482a      	ldr	r0, [pc, #168]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000ba6:	f002 fc45 	bl	8003434 <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bb0:	f000 f8fe 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb8:	2204      	movs	r2, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000bbe:	f002 fc39 	bl	8003434 <HAL_TIM_PWM_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000bc8:	f000 f8f2 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481e      	ldr	r0, [pc, #120]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000bd6:	f002 fc2d 	bl	8003434 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000be0:	f000 f8e6 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000be8:	220c      	movs	r2, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4818      	ldr	r0, [pc, #96]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000bee:	f002 fc21 	bl	8003434 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000bf8:	f000 f8da 	bl	8000db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000c32:	f003 f931 	bl	8003e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000c3c:	f000 f8b8 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c40:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <MX_TIM1_Init+0x160>)
 8000c42:	f000 f9d1 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000c46:	bf00      	nop
 8000c48:	3758      	adds	r7, #88	@ 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000084 	.word	0x20000084
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c5e:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <MX_USART2_UART_Init+0x5c>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c9c:	f003 f97a 	bl	8003f94 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f000 f883 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000d0 	.word	0x200000d0
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a24      	ldr	r2, [pc, #144]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a1e      	ldr	r2, [pc, #120]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a18      	ldr	r2, [pc, #96]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_GPIO_Init+0xc4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f000 fee7 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <MX_GPIO_Init+0xc8>)
 8000d52:	f000 fd2f 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d56:	2320      	movs	r3, #32
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f000 fd20 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000800 	.word	0x48000800

08000d84 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Receive CB fxn
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	// This is required?
	UNUSED(huart);
	// Signal to main code that a character was received
	rcvflg = 1;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_UART_RxCpltCallback+0x20>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
	// Parrot character to terminal
	HAL_UART_Transmit_IT(&huart2, &buff, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	4904      	ldr	r1, [pc, #16]	@ (8000da8 <HAL_UART_RxCpltCallback+0x24>)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_UART_RxCpltCallback+0x28>)
 8000d98:	f003 f94a 	bl	8004030 <HAL_UART_Transmit_IT>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000158 	.word	0x20000158
 8000da8:	20000159 	.word	0x20000159
 8000dac:	200000d0 	.word	0x200000d0

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <motor_set_duty>:
 * @return  Nothing.
 * @note    Something to note.
 * @warning Duty cycle is an INTEGER, please round all floats when passing, thx.
 */
 void motor_set_duty(Motor_Str* mot, int32_t duty)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
    // Disabled motor check
    if (mot->enable != 1){ return; }
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d162      	bne.n	8000e94 <motor_set_duty+0xd8>

    // Duty cycle saturation
    if (duty > 100){
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b64      	cmp	r3, #100	@ 0x64
 8000dd2:	dd02      	ble.n	8000dda <motor_set_duty+0x1e>
        duty = 100;
 8000dd4:	2364      	movs	r3, #100	@ 0x64
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e006      	b.n	8000de8 <motor_set_duty+0x2c>
    } else if (duty < -100){
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000de0:	da02      	bge.n	8000de8 <motor_set_duty+0x2c>
        duty = -100;
 8000de2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000de6:	603b      	str	r3, [r7, #0]
    }

    // ARR is unsigned, cast it to signed for math
    int32_t ARR = (int32_t) (mot->timer->Init.Period + 1);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]

    // Calculate duty CCR
    duty = duty*ARR/100;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	4a28      	ldr	r2, [pc, #160]	@ (8000e9c <motor_set_duty+0xe0>)
 8000dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000e00:	1152      	asrs	r2, r2, #5
 8000e02:	17db      	asrs	r3, r3, #31
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	603b      	str	r3, [r7, #0]

    // Assign the duty cycle CCR to proper channel pair
    if (duty < 0){
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da1d      	bge.n	8000e4a <motor_set_duty+0x8e>
        if(mot->ChannelPair == 1){
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10c      	bne.n	8000e30 <motor_set_duty+0x74>
            mot->timer->Instance->CCR1 = ARR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	635a      	str	r2, [r3, #52]	@ 0x34
            mot->timer->Instance->CCR2 = ARR + duty;
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	441a      	add	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e2e:	e029      	b.n	8000e84 <motor_set_duty+0xc8>
        } else{
            mot->timer->Instance->CCR3 = ARR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	63da      	str	r2, [r3, #60]	@ 0x3c
            mot->timer->Instance->CCR4 = ARR + duty;
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	441a      	add	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e48:	e01c      	b.n	8000e84 <motor_set_duty+0xc8>
        }
    } else{
        if(mot->ChannelPair == 1){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10c      	bne.n	8000e6c <motor_set_duty+0xb0>
            mot->timer->Instance->CCR1 = ARR - duty;
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	1ad2      	subs	r2, r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	635a      	str	r2, [r3, #52]	@ 0x34
            mot->timer->Instance->CCR2 = ARR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e6a:	e00b      	b.n	8000e84 <motor_set_duty+0xc8>
        } else{
            mot->timer->Instance->CCR3 = ARR - duty;
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	1ad2      	subs	r2, r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	63da      	str	r2, [r3, #60]	@ 0x3c
            mot->timer->Instance->CCR4 = ARR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    // Print to the console so we can see what's happening
    printf("Setting Motor %ld Duty Cycle to %ld\r\n", mot->ChannelPair, duty);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <motor_set_duty+0xe4>)
 8000e8e:	f004 fe1f 	bl	8005ad0 <iprintf>
 8000e92:	e000      	b.n	8000e96 <motor_set_duty+0xda>
    if (mot->enable != 1){ return; }
 8000e94:	bf00      	nop
}
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	51eb851f 	.word	0x51eb851f
 8000ea0:	08006e38 	.word	0x08006e38

08000ea4 <motor_enable>:
 * @return  Nothing.
 * @note    Something to note.
 * @warning Warning.
 */
 void motor_enable(Motor_Str* mot)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    // Retrieve ARR
    uint32_t ARR = (uint32_t) (mot->timer->Init.Period + 1);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]

    // Set motors to BRAKE using proper channel pair
    if(mot->ChannelPair == 1){
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10a      	bne.n	8000ed4 <motor_enable+0x30>
        mot->timer->Instance->CCR1 = ARR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34
        mot->timer->Instance->CCR2 = ARR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ed2:	e009      	b.n	8000ee8 <motor_enable+0x44>
    } else{
        mot->timer->Instance->CCR3 = ARR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	63da      	str	r2, [r3, #60]	@ 0x3c
        mot->timer->Instance->CCR4 = ARR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    // Set enable flag high
    mot->enable = 1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]

    // Print to the console so we can see what's happening
    printf("Enabling Motor %ld\r\n", mot->ChannelPair);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <motor_enable+0x60>)
 8000ef6:	f004 fdeb 	bl	8005ad0 <iprintf>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08006e60 	.word	0x08006e60

08000f08 <motor_disable>:
 * @return  Nothing.
 * @note    Something to note.
 * @warning Warning.
 */
 void motor_disable(Motor_Str* mot)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

    // Set motors to STOP using proper channel pair
    if(mot->ChannelPair == 1){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10a      	bne.n	8000f2e <motor_disable+0x26>
        mot->timer->Instance->CCR1 = 0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
        mot->timer->Instance->CCR2 = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f2c:	e009      	b.n	8000f42 <motor_disable+0x3a>
    } else{
        mot->timer->Instance->CCR3 = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c
        mot->timer->Instance->CCR4 = 0;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    // Set enable flag low
    mot->enable = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]

    // Print to the console so we can see what's happening
    printf("Disabling Motor %ld\r\n", mot->ChannelPair);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <motor_disable+0x54>)
 8000f50:	f004 fdbe 	bl	8005ad0 <iprintf>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08006e78 	.word	0x08006e78

08000f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_TIM_PWM_MspInit+0x38>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <HAL_TIM_MspPostInit+0x68>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d11d      	bne.n	8001046 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_TIM_MspPostInit+0x6c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <HAL_TIM_MspPostInit+0x6c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_TIM_MspPostInit+0x6c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001022:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f000 fbb7 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40012c00 	.word	0x40012c00
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ac      	sub	sp, #176	@ 0xb0
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2288      	movs	r2, #136	@ 0x88
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f004 fd9e 	bl	8005bba <memset>
  if(huart->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a25      	ldr	r2, [pc, #148]	@ (8001118 <HAL_UART_MspInit+0xc0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d143      	bne.n	8001110 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001088:	2302      	movs	r3, #2
 800108a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fbb3 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a0:	f7ff fe86 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a16      	ldr	r2, [pc, #88]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d4:	230c      	movs	r3, #12
 80010d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ec:	2307      	movs	r3, #7
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f000 fb5a 	bl	80017b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2026      	movs	r0, #38	@ 0x26
 8001106:	f000 faa0 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800110a:	2026      	movs	r0, #38	@ 0x26
 800110c:	f000 fab9 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	37b0      	adds	r7, #176	@ 0xb0
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f949 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <USART2_IRQHandler+0x10>)
 8001186:	f002 fffd 	bl	8004184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000d0 	.word	0x200000d0

08001194 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
  }

  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
  }
  return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122e:	605a      	str	r2, [r3, #4]
  return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f004 fcf6 	bl	8005c90 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20018000 	.word	0x20018000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	2000015c 	.word	0x2000015c
 80012d8:	200002b0 	.word	0x200002b0

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ffea 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	@ (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	@ (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f004 fcb5 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff f91d 	bl	8000570 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001344:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 8001348:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800134c:	200002b0 	.word	0x200002b0

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>
	...

08001354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_Init+0x3c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_Init+0x3c>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001368:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136a:	2003      	movs	r0, #3
 800136c:	f000 f962 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001370:	2000      	movs	r0, #0
 8001372:	f000 f80f 	bl	8001394 <HAL_InitTick>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	e001      	b.n	8001386 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001382:	f7ff fded 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001386:	79fb      	ldrb	r3, [r7, #7]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_InitTick+0x6c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a8:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <HAL_InitTick+0x70>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_InitTick+0x6c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f96d 	bl	800169e <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d809      	bhi.n	80013e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 f937 	bl	800164a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <HAL_InitTick+0x74>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e007      	b.n	80013f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e004      	b.n	80013f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e001      	b.n	80013f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008
 8001430:	20000160 	.word	0x20000160

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000160 	.word	0x20000160

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	@ (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	@ (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	@ (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d008      	beq.n	80016e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2204      	movs	r2, #4
 80016d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e022      	b.n	8001726 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 020e 	bic.w	r2, r2, #14
 80016ee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001704:	f003 021c 	and.w	r2, r3, #28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d005      	beq.n	8001756 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e029      	b.n	80017aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 020e 	bic.w	r2, r2, #14
 8001764:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f003 021c 	and.w	r2, r3, #28
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
    }
  }
  return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e17f      	b.n	8001ac4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8171 	beq.w	8001abe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x40>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 0201 	and.w	r2, r3, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d118      	bne.n	8001894 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	6939      	ldr	r1, [r7, #16]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80ac 	beq.w	8001abe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae4 <HAL_GPIO_Init+0x330>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ae4 <HAL_GPIO_Init+0x330>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6613      	str	r3, [r2, #96]	@ 0x60
 8001972:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae4 <HAL_GPIO_Init+0x330>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019a8:	d025      	beq.n	80019f6 <HAL_GPIO_Init+0x242>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4f      	ldr	r2, [pc, #316]	@ (8001aec <HAL_GPIO_Init+0x338>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <HAL_GPIO_Init+0x23e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	@ (8001af0 <HAL_GPIO_Init+0x33c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x23a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4d      	ldr	r2, [pc, #308]	@ (8001af4 <HAL_GPIO_Init+0x340>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x236>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	@ (8001af8 <HAL_GPIO_Init+0x344>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x232>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	@ (8001afc <HAL_GPIO_Init+0x348>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x22e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b00 <HAL_GPIO_Init+0x34c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x22a>
 80019da:	2306      	movs	r3, #6
 80019dc:	e00c      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019de:	2307      	movs	r3, #7
 80019e0:	e00a      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x244>
 80019f6:	2300      	movs	r3, #0
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a08:	4937      	ldr	r1, [pc, #220]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a3a:	4a32      	ldr	r2, [pc, #200]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a40:	4b30      	ldr	r3, [pc, #192]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a64:	4a27      	ldr	r2, [pc, #156]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ab8:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <HAL_GPIO_Init+0x350>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f47f ae78 	bne.w	80017c4 <HAL_GPIO_Init+0x10>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000c00 	.word	0x48000c00
 8001af8:	48001000 	.word	0x48001000
 8001afc:	48001400 	.word	0x48001400
 8001b00:	48001800 	.word	0x48001800
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40007000 	.word	0x40007000

08001b54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b62:	d130      	bne.n	8001bc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b70:	d038      	beq.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b72:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2232      	movs	r2, #50	@ 0x32
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9b      	lsrs	r3, r3, #18
 8001b94:	3301      	adds	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b98:	e002      	b.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bac:	d102      	bne.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f2      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc0:	d110      	bne.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e00f      	b.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd2:	d007      	beq.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bdc:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e3ca      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c12:	4b97      	ldr	r3, [pc, #604]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c1c:	4b94      	ldr	r3, [pc, #592]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80e4 	beq.w	8001dfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4a>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f040 808b 	bne.w	8001d58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	f040 8087 	bne.w	8001d58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x62>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e3a2      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	4b82      	ldr	r3, [pc, #520]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_RCC_OscConfig+0x7c>
 8001c72:	4b7f      	ldr	r3, [pc, #508]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c7a:	e005      	b.n	8001c88 <HAL_RCC_OscConfig+0x88>
 8001c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d223      	bcs.n	8001cd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fd55 	bl	8002740 <RCC_SetFlashLatencyFromMSIRange>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e383      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca0:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a72      	ldr	r2, [pc, #456]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b70      	ldr	r3, [pc, #448]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	496d      	ldr	r1, [pc, #436]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	4968      	ldr	r1, [pc, #416]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
 8001cd2:	e025      	b.n	8001d20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd4:	4b66      	ldr	r3, [pc, #408]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a65      	ldr	r2, [pc, #404]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b63      	ldr	r3, [pc, #396]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4960      	ldr	r1, [pc, #384]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	495b      	ldr	r1, [pc, #364]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fd15 	bl	8002740 <RCC_SetFlashLatencyFromMSIRange>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e343      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d20:	f000 fc4a 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b52      	ldr	r3, [pc, #328]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	4950      	ldr	r1, [pc, #320]	@ (8001e74 <HAL_RCC_OscConfig+0x274>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e78 <HAL_RCC_OscConfig+0x278>)
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d40:	4b4e      	ldr	r3, [pc, #312]	@ (8001e7c <HAL_RCC_OscConfig+0x27c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fb25 	bl	8001394 <HAL_InitTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d052      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	e327      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d032      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a42      	ldr	r2, [pc, #264]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb62 	bl	8001434 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d74:	f7ff fb5e 	bl	8001434 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e310      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d86:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d92:	4b37      	ldr	r3, [pc, #220]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a36      	ldr	r2, [pc, #216]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4931      	ldr	r1, [pc, #196]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	492c      	ldr	r1, [pc, #176]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e01a      	b.n	8001dfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a29      	ldr	r2, [pc, #164]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fb2f 	bl	8001434 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dda:	f7ff fb2b 	bl	8001434 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e2dd      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x1da>
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d074      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x21a>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d10e      	bne.n	8001e32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d064      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d160      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e2ba      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x24a>
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0b      	ldr	r2, [pc, #44]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e026      	b.n	8001e98 <HAL_RCC_OscConfig+0x298>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e52:	d115      	bne.n	8001e80 <HAL_RCC_OscConfig+0x280>
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a02      	ldr	r2, [pc, #8]	@ (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e014      	b.n	8001e98 <HAL_RCC_OscConfig+0x298>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08006e90 	.word	0x08006e90
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004
 8001e80:	4ba0      	ldr	r3, [pc, #640]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a9f      	ldr	r2, [pc, #636]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a9c      	ldr	r2, [pc, #624]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fac8 	bl	8001434 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fac4 	bl	8001434 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e276      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	4b92      	ldr	r3, [pc, #584]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x2a8>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fab4 	bl	8001434 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fab0 	bl	8001434 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e262      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ee2:	4b88      	ldr	r3, [pc, #544]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2d0>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d060      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_OscConfig+0x310>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d119      	bne.n	8001f3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d116      	bne.n	8001f3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f10:	4b7c      	ldr	r3, [pc, #496]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_OscConfig+0x328>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e23f      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b76      	ldr	r3, [pc, #472]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	4973      	ldr	r1, [pc, #460]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3c:	e040      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d023      	beq.n	8001f8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f46:	4b6f      	ldr	r3, [pc, #444]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7ff fa6f 	bl	8001434 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fa6b 	bl	8001434 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e21d      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6c:	4b65      	ldr	r3, [pc, #404]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b62      	ldr	r3, [pc, #392]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	495f      	ldr	r1, [pc, #380]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	e018      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5c      	ldr	r2, [pc, #368]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fa4b 	bl	8001434 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fa47 	bl	8001434 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1f9      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb4:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03c      	beq.n	8002046 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01c      	beq.n	800200e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fda:	4a4a      	ldr	r2, [pc, #296]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fa26 	bl	8001434 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff fa22 	bl	8001434 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1d4      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffe:	4b41      	ldr	r3, [pc, #260]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ef      	beq.n	8001fec <HAL_RCC_OscConfig+0x3ec>
 800200c:	e01b      	b.n	8002046 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200e:	4b3d      	ldr	r3, [pc, #244]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8002010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002014:	4a3b      	ldr	r2, [pc, #236]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff fa09 	bl	8001434 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002026:	f7ff fa05 	bl	8001434 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1b7      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002038:	4b32      	ldr	r3, [pc, #200]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ef      	bne.n	8002026 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80a6 	beq.w	80021a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002058:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	4a26      	ldr	r2, [pc, #152]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002070:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207c:	2301      	movs	r3, #1
 800207e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002080:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <HAL_RCC_OscConfig+0x508>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d118      	bne.n	80020be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208c:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <HAL_RCC_OscConfig+0x508>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1d      	ldr	r2, [pc, #116]	@ (8002108 <HAL_RCC_OscConfig+0x508>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002098:	f7ff f9cc 	bl	8001434 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7ff f9c8 	bl	8001434 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e17a      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_RCC_OscConfig+0x508>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4d8>
 80020c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020d6:	e029      	b.n	800212c <HAL_RCC_OscConfig+0x52c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d115      	bne.n	800210c <HAL_RCC_OscConfig+0x50c>
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	4a07      	ldr	r2, [pc, #28]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	4a03      	ldr	r2, [pc, #12]	@ (8002104 <HAL_RCC_OscConfig+0x504>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002100:	e014      	b.n	800212c <HAL_RCC_OscConfig+0x52c>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	40007000 	.word	0x40007000
 800210c:	4b9c      	ldr	r3, [pc, #624]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	4a9b      	ldr	r2, [pc, #620]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800211c:	4b98      	ldr	r3, [pc, #608]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002122:	4a97      	ldr	r2, [pc, #604]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d016      	beq.n	8002162 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff f97e 	bl	8001434 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213a:	e00a      	b.n	8002152 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7ff f97a 	bl	8001434 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e12a      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	4b8b      	ldr	r3, [pc, #556]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ed      	beq.n	800213c <HAL_RCC_OscConfig+0x53c>
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff f967 	bl	8001434 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7ff f963 	bl	8001434 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e113      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002180:	4b7f      	ldr	r3, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ed      	bne.n	800216a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002198:	4a79      	ldr	r2, [pc, #484]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80fe 	beq.w	80023a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	f040 80d0 	bne.w	8002354 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021b4:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d130      	bne.n	800222a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	3b01      	subs	r3, #1
 80021d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d127      	bne.n	800222a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d11f      	bne.n	800222a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021f4:	2a07      	cmp	r2, #7
 80021f6:	bf14      	ite	ne
 80021f8:	2201      	movne	r2, #1
 80021fa:	2200      	moveq	r2, #0
 80021fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fe:	4293      	cmp	r3, r2
 8002200:	d113      	bne.n	800222a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	3b01      	subs	r3, #1
 8002210:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d109      	bne.n	800222a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d06e      	beq.n	8002308 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b0c      	cmp	r3, #12
 800222e:	d069      	beq.n	8002304 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002230:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800223c:	4b50      	ldr	r3, [pc, #320]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0ad      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800224c:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a4b      	ldr	r2, [pc, #300]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002258:	f7ff f8ec 	bl	8001434 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f8e8 	bl	8001434 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e09a      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002272:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227e:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <HAL_RCC_OscConfig+0x784>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800228e:	3a01      	subs	r2, #1
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002298:	0212      	lsls	r2, r2, #8
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022a0:	0852      	lsrs	r2, r2, #1
 80022a2:	3a01      	subs	r2, #1
 80022a4:	0552      	lsls	r2, r2, #21
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022ac:	0852      	lsrs	r2, r2, #1
 80022ae:	3a01      	subs	r2, #1
 80022b0:	0652      	lsls	r2, r2, #25
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022b8:	0912      	lsrs	r2, r2, #4
 80022ba:	0452      	lsls	r2, r2, #17
 80022bc:	430a      	orrs	r2, r1
 80022be:	4930      	ldr	r1, [pc, #192]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80022d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022dc:	f7ff f8aa 	bl	8001434 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff f8a6 	bl	8001434 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e058      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002302:	e050      	b.n	80023a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e04f      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d148      	bne.n	80023a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002314:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002320:	4b17      	ldr	r3, [pc, #92]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800232a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800232c:	f7ff f882 	bl	8001434 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff f87e 	bl	8001434 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e030      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x734>
 8002352:	e028      	b.n	80023a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d023      	beq.n	80023a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a08      	ldr	r2, [pc, #32]	@ (8002380 <HAL_RCC_OscConfig+0x780>)
 8002360:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff f865 	bl	8001434 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236c:	e00c      	b.n	8002388 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff f861 	bl	8001434 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d905      	bls.n	8002388 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e013      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
 8002380:	40021000 	.word	0x40021000
 8002384:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_OscConfig+0x7b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ec      	bne.n	800236e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x7b0>)
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4905      	ldr	r1, [pc, #20]	@ (80023b0 <HAL_RCC_OscConfig+0x7b0>)
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_OscConfig+0x7b4>)
 800239c:	4013      	ands	r3, r2
 800239e:	60cb      	str	r3, [r1, #12]
 80023a0:	e001      	b.n	80023a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	feeefffc 	.word	0xfeeefffc

080023b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0e7      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b75      	ldr	r3, [pc, #468]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b72      	ldr	r3, [pc, #456]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4970      	ldr	r1, [pc, #448]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b6e      	ldr	r3, [pc, #440]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0cf      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d010      	beq.n	800242a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002414:	429a      	cmp	r2, r3
 8002416:	d908      	bls.n	800242a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4960      	ldr	r1, [pc, #384]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d04c      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	4b5a      	ldr	r3, [pc, #360]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d121      	bne.n	800248e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0a6      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002456:	4b54      	ldr	r3, [pc, #336]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e09a      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800246e:	4b4e      	ldr	r3, [pc, #312]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08e      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e086      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b46      	ldr	r3, [pc, #280]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4943      	ldr	r1, [pc, #268]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe ffc8 	bl	8001434 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe ffc4 	bl	8001434 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e06e      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b3a      	ldr	r3, [pc, #232]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d208      	bcs.n	80024fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	492b      	ldr	r1, [pc, #172]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fe:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d210      	bcs.n	800252e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 0207 	bic.w	r2, r3, #7
 8002514:	4923      	ldr	r1, [pc, #140]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251c:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_RCC_ClockConfig+0x1ec>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e036      	b.n	800259c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253a:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4918      	ldr	r1, [pc, #96]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002558:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4910      	ldr	r1, [pc, #64]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256c:	f000 f824 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	490b      	ldr	r1, [pc, #44]	@ (80025ac <HAL_RCC_ClockConfig+0x1f4>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800258a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1fc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe feff 	bl	8001394 <HAL_InitTick>
 8002596:	4603      	mov	r3, r0
 8002598:	72fb      	strb	r3, [r7, #11]

  return status;
 800259a:	7afb      	ldrb	r3, [r7, #11]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08006e90 	.word	0x08006e90
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	@ 0x24
 80025bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c6:	4b3e      	ldr	r3, [pc, #248]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d0:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d121      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d11e      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ec:	4b34      	ldr	r3, [pc, #208]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f8:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e005      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002608:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002614:	4a2b      	ldr	r2, [pc, #172]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d102      	bne.n	8002636 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002630:	4b25      	ldr	r3, [pc, #148]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e004      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d101      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800263c:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x114>)
 800263e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d134      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002646:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0xa6>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d003      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xac>
 800265c:	e005      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800265e:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002660:	617b      	str	r3, [r7, #20]
      break;
 8002662:	e005      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002666:	617b      	str	r3, [r7, #20]
      break;
 8002668:	e002      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	617b      	str	r3, [r7, #20]
      break;
 800266e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	3301      	adds	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267e:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	fb03 f202 	mul.w	r2, r3, r2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	0e5b      	lsrs	r3, r3, #25
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	3301      	adds	r3, #1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026b0:	69bb      	ldr	r3, [r7, #24]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	@ 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08006ea8 	.word	0x08006ea8
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08006ea0 	.word	0x08006ea0

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002718:	f7ff ffda 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0adb      	lsrs	r3, r3, #11
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	@ (800273c <HAL_RCC_GetPCLK2Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08006ea0 	.word	0x08006ea0

08002740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800274c:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002758:	f7ff f9ee 	bl	8001b38 <HAL_PWREx_GetVoltageRange>
 800275c:	6178      	str	r0, [r7, #20]
 800275e:	e014      	b.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	4a24      	ldr	r2, [pc, #144]	@ (80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276a:	6593      	str	r3, [r2, #88]	@ 0x58
 800276c:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002778:	f7ff f9de 	bl	8001b38 <HAL_PWREx_GetVoltageRange>
 800277c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002782:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002788:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002790:	d10b      	bne.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b80      	cmp	r3, #128	@ 0x80
 8002796:	d919      	bls.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2ba0      	cmp	r3, #160	@ 0xa0
 800279c:	d902      	bls.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800279e:	2302      	movs	r3, #2
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	e013      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	e010      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b80      	cmp	r3, #128	@ 0x80
 80027ae:	d902      	bls.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027b0:	2303      	movs	r3, #3
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	e00a      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b80      	cmp	r3, #128	@ 0x80
 80027ba:	d102      	bne.n	80027c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027bc:	2302      	movs	r3, #2
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e004      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b70      	cmp	r3, #112	@ 0x70
 80027c6:	d101      	bne.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c8:	2301      	movs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 0207 	bic.w	r2, r3, #7
 80027d4:	4909      	ldr	r1, [pc, #36]	@ (80027fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40022000 	.word	0x40022000

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002808:	2300      	movs	r3, #0
 800280a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800280c:	2300      	movs	r3, #0
 800280e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002818:	2b00      	cmp	r3, #0
 800281a:	d041      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002820:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002824:	d02a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002826:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800282a:	d824      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800282c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002836:	d81e      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800283c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002840:	d010      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002842:	e018      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002844:	4b86      	ldr	r3, [pc, #536]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a85      	ldr	r2, [pc, #532]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002850:	e015      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fabb 	bl	8002dd4 <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002862:	e00c      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3320      	adds	r3, #32
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fba6 	bl	8002fbc <RCCEx_PLLSAI2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	74fb      	strb	r3, [r7, #19]
      break;
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800287c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002884:	4b76      	ldr	r3, [pc, #472]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002892:	4973      	ldr	r1, [pc, #460]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d041      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028b4:	d02a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028ba:	d824      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028c6:	d81e      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d0:	d010      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028d2:	e018      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028d4:	4b62      	ldr	r3, [pc, #392]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a61      	ldr	r2, [pc, #388]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e0:	e015      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fa73 	bl	8002dd4 <RCCEx_PLLSAI1_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028f2:	e00c      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3320      	adds	r3, #32
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fb5e 	bl	8002fbc <RCCEx_PLLSAI2_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002904:	e003      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	74fb      	strb	r3, [r7, #19]
      break;
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800290c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002914:	4b52      	ldr	r3, [pc, #328]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002922:	494f      	ldr	r1, [pc, #316]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800292a:	e001      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a0 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002942:	4b47      	ldr	r3, [pc, #284]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00d      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b41      	ldr	r3, [pc, #260]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	4a40      	ldr	r2, [pc, #256]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	@ 0x58
 8002964:	4b3e      	ldr	r3, [pc, #248]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002974:	4b3b      	ldr	r3, [pc, #236]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3a      	ldr	r2, [pc, #232]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002980:	f7fe fd58 	bl	8001434 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002986:	e009      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7fe fd54 	bl	8001434 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	74fb      	strb	r3, [r7, #19]
        break;
 800299a:	e005      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ef      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d15c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01f      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d019      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029cc:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029d8:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	4a20      	ldr	r2, [pc, #128]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fd13 	bl	8001434 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a10:	e00b      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fd0f 	bl	8001434 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d902      	bls.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	74fb      	strb	r3, [r7, #19]
            break;
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ec      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a4e:	4904      	ldr	r1, [pc, #16]	@ (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a56:	e009      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6c:	7c7b      	ldrb	r3, [r7, #17]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a72:	4b9e      	ldr	r3, [pc, #632]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	4a9d      	ldr	r2, [pc, #628]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a8a:	4b98      	ldr	r3, [pc, #608]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a90:	f023 0203 	bic.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a98:	4994      	ldr	r1, [pc, #592]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aac:	4b8f      	ldr	r3, [pc, #572]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f023 020c 	bic.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aba:	498c      	ldr	r1, [pc, #560]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ace:	4b87      	ldr	r3, [pc, #540]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	4983      	ldr	r1, [pc, #524]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002af0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	497b      	ldr	r1, [pc, #492]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b12:	4b76      	ldr	r3, [pc, #472]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b20:	4972      	ldr	r1, [pc, #456]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b34:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	496a      	ldr	r1, [pc, #424]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b56:	4b65      	ldr	r3, [pc, #404]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	4961      	ldr	r1, [pc, #388]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b78:	4b5c      	ldr	r3, [pc, #368]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b86:	4959      	ldr	r1, [pc, #356]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9a:	4b54      	ldr	r3, [pc, #336]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba8:	4950      	ldr	r1, [pc, #320]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	4948      	ldr	r1, [pc, #288]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bde:	4b43      	ldr	r3, [pc, #268]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	493f      	ldr	r1, [pc, #252]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d028      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c00:	4b3a      	ldr	r3, [pc, #232]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c0e:	4937      	ldr	r1, [pc, #220]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b32      	ldr	r3, [pc, #200]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a31      	ldr	r2, [pc, #196]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
 8002c2c:	e011      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f8c8 	bl	8002dd4 <RCCEx_PLLSAI1_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d028      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c5e:	4b23      	ldr	r3, [pc, #140]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	491f      	ldr	r1, [pc, #124]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a1a      	ldr	r2, [pc, #104]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c88:	60d3      	str	r3, [r2, #12]
 8002c8a:	e011      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f899 	bl	8002dd4 <RCCEx_PLLSAI1_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d02b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cca:	4908      	ldr	r1, [pc, #32]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a02      	ldr	r2, [pc, #8]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	60d3      	str	r3, [r2, #12]
 8002ce8:	e014      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f867 	bl	8002dd4 <RCCEx_PLLSAI1_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02f      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d2e:	4928      	ldr	r1, [pc, #160]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d3e:	d10d      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f844 	bl	8002dd4 <RCCEx_PLLSAI1_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d014      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	74bb      	strb	r3, [r7, #18]
 8002d5a:	e011      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3320      	adds	r3, #32
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f925 	bl	8002fbc <RCCEx_PLLSAI2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d9a:	490d      	ldr	r1, [pc, #52]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dbe:	4904      	ldr	r1, [pc, #16]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002de2:	4b75      	ldr	r3, [pc, #468]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d018      	beq.n	8002e20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dee:	4b72      	ldr	r3, [pc, #456]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0203 	and.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d10d      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
       ||
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e06:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
       ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d047      	beq.n	8002eaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e044      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d018      	beq.n	8002e5a <RCCEx_PLLSAI1_Config+0x86>
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d825      	bhi.n	8002e78 <RCCEx_PLLSAI1_Config+0xa4>
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d002      	beq.n	8002e36 <RCCEx_PLLSAI1_Config+0x62>
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d009      	beq.n	8002e48 <RCCEx_PLLSAI1_Config+0x74>
 8002e34:	e020      	b.n	8002e78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e36:	4b60      	ldr	r3, [pc, #384]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d11d      	bne.n	8002e7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e46:	e01a      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e48:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d116      	bne.n	8002e82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e58:	e013      	b.n	8002e82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e5a:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10f      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e66:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e76:	e006      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e004      	b.n	8002e88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	4944      	ldr	r1, [pc, #272]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d17d      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002eb0:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a40      	ldr	r2, [pc, #256]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ebc:	f7fe faba 	bl	8001434 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ec2:	e009      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec4:	f7fe fab6 	bl	8001434 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ed6:	e005      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ed8:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ef      	bne.n	8002ec4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d160      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef0:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6892      	ldr	r2, [r2, #8]
 8002f00:	0211      	lsls	r1, r2, #8
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	0912      	lsrs	r2, r2, #4
 8002f08:	0452      	lsls	r2, r2, #17
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	492a      	ldr	r1, [pc, #168]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	610b      	str	r3, [r1, #16]
 8002f12:	e027      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d112      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1a:	4b27      	ldr	r3, [pc, #156]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	0211      	lsls	r1, r2, #8
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6912      	ldr	r2, [r2, #16]
 8002f30:	0852      	lsrs	r2, r2, #1
 8002f32:	3a01      	subs	r2, #1
 8002f34:	0552      	lsls	r2, r2, #21
 8002f36:	430a      	orrs	r2, r1
 8002f38:	491f      	ldr	r1, [pc, #124]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
 8002f3e:	e011      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6892      	ldr	r2, [r2, #8]
 8002f50:	0211      	lsls	r1, r2, #8
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6952      	ldr	r2, [r2, #20]
 8002f56:	0852      	lsrs	r2, r2, #1
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	0652      	lsls	r2, r2, #25
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	4916      	ldr	r1, [pc, #88]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fa60 	bl	8001434 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f76:	e009      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f78:	f7fe fa5c 	bl	8001434 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	73fb      	strb	r3, [r7, #15]
          break;
 8002f8a:	e005      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	4904      	ldr	r1, [pc, #16]	@ (8002fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000

08002fbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fca:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0203 	and.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10d      	bne.n	8003002 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fee:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d047      	beq.n	8003092 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e044      	b.n	8003092 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d018      	beq.n	8003042 <RCCEx_PLLSAI2_Config+0x86>
 8003010:	2b03      	cmp	r3, #3
 8003012:	d825      	bhi.n	8003060 <RCCEx_PLLSAI2_Config+0xa4>
 8003014:	2b01      	cmp	r3, #1
 8003016:	d002      	beq.n	800301e <RCCEx_PLLSAI2_Config+0x62>
 8003018:	2b02      	cmp	r3, #2
 800301a:	d009      	beq.n	8003030 <RCCEx_PLLSAI2_Config+0x74>
 800301c:	e020      	b.n	8003060 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800301e:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11d      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302e:	e01a      	b.n	8003066 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003030:	4b50      	ldr	r3, [pc, #320]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d116      	bne.n	800306a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003040:	e013      	b.n	800306a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003042:	4b4c      	ldr	r3, [pc, #304]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800304e:	4b49      	ldr	r3, [pc, #292]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800305e:	e006      	b.n	800306e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      break;
 8003064:	e004      	b.n	8003070 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003066:	bf00      	nop
 8003068:	e002      	b.n	8003070 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800306e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003076:	4b3f      	ldr	r3, [pc, #252]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	430b      	orrs	r3, r1
 800308c:	4939      	ldr	r1, [pc, #228]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d167      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003098:	4b36      	ldr	r3, [pc, #216]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a35      	ldr	r2, [pc, #212]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fe f9c6 	bl	8001434 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030aa:	e009      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030ac:	f7fe f9c2 	bl	8001434 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	73fb      	strb	r3, [r7, #15]
        break;
 80030be:	e005      	b.n	80030cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ef      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d14a      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	0912      	lsrs	r2, r2, #4
 80030f0:	0452      	lsls	r2, r2, #17
 80030f2:	430a      	orrs	r2, r1
 80030f4:	491f      	ldr	r1, [pc, #124]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	614b      	str	r3, [r1, #20]
 80030fa:	e011      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003104:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	0211      	lsls	r1, r2, #8
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6912      	ldr	r2, [r2, #16]
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0652      	lsls	r2, r2, #25
 8003118:	430a      	orrs	r2, r1
 800311a:	4916      	ldr	r1, [pc, #88]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311c:	4313      	orrs	r3, r2
 800311e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003120:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a13      	ldr	r2, [pc, #76]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe f982 	bl	8001434 <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003132:	e009      	b.n	8003148 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003134:	f7fe f97e 	bl	8001434 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d902      	bls.n	8003148 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	73fb      	strb	r3, [r7, #15]
          break;
 8003146:	e005      	b.n	8003154 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ef      	beq.n	8003134 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4904      	ldr	r1, [pc, #16]	@ (8003174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e049      	b.n	800321e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd ff02 	bl	8000fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fa50 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_TIM_PWM_Start+0x24>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e03c      	b.n	80032c6 <HAL_TIM_PWM_Start+0x9e>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d109      	bne.n	8003266 <HAL_TIM_PWM_Start+0x3e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e02f      	b.n	80032c6 <HAL_TIM_PWM_Start+0x9e>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d109      	bne.n	8003280 <HAL_TIM_PWM_Start+0x58>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e022      	b.n	80032c6 <HAL_TIM_PWM_Start+0x9e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d109      	bne.n	800329a <HAL_TIM_PWM_Start+0x72>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e015      	b.n	80032c6 <HAL_TIM_PWM_Start+0x9e>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b10      	cmp	r3, #16
 800329e:	d109      	bne.n	80032b4 <HAL_TIM_PWM_Start+0x8c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e008      	b.n	80032c6 <HAL_TIM_PWM_Start+0x9e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e09c      	b.n	8003408 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_TIM_PWM_Start+0xb6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032dc:	e023      	b.n	8003326 <HAL_TIM_PWM_Start+0xfe>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0xc6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032ec:	e01b      	b.n	8003326 <HAL_TIM_PWM_Start+0xfe>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0xd6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	e013      	b.n	8003326 <HAL_TIM_PWM_Start+0xfe>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0xe6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800330c:	e00b      	b.n	8003326 <HAL_TIM_PWM_Start+0xfe>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b10      	cmp	r3, #16
 8003312:	d104      	bne.n	800331e <HAL_TIM_PWM_Start+0xf6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800331c:	e003      	b.n	8003326 <HAL_TIM_PWM_Start+0xfe>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd04 	bl	8003d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <HAL_TIM_PWM_Start+0x1e8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_TIM_PWM_Start+0x13e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a34      	ldr	r2, [pc, #208]	@ (8003414 <HAL_TIM_PWM_Start+0x1ec>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIM_PWM_Start+0x13e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <HAL_TIM_PWM_Start+0x1f0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_TIM_PWM_Start+0x13e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a31      	ldr	r2, [pc, #196]	@ (800341c <HAL_TIM_PWM_Start+0x1f4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIM_PWM_Start+0x13e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a2f      	ldr	r2, [pc, #188]	@ (8003420 <HAL_TIM_PWM_Start+0x1f8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_TIM_PWM_Start+0x142>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_TIM_PWM_Start+0x144>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a22      	ldr	r2, [pc, #136]	@ (8003410 <HAL_TIM_PWM_Start+0x1e8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x19e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003392:	d018      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x19e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_TIM_PWM_Start+0x1fc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x19e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	@ (8003428 <HAL_TIM_PWM_Start+0x200>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x19e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <HAL_TIM_PWM_Start+0x204>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x19e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a17      	ldr	r2, [pc, #92]	@ (8003414 <HAL_TIM_PWM_Start+0x1ec>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x19e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <HAL_TIM_PWM_Start+0x1f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d115      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <HAL_TIM_PWM_Start+0x208>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b06      	cmp	r3, #6
 80033d6:	d015      	beq.n	8003404 <HAL_TIM_PWM_Start+0x1dc>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033de:	d011      	beq.n	8003404 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f0:	e008      	b.n	8003404 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e000      	b.n	8003406 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	00010007 	.word	0x00010007

08003434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800344e:	2302      	movs	r3, #2
 8003450:	e0ff      	b.n	8003652 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b14      	cmp	r3, #20
 800345e:	f200 80f0 	bhi.w	8003642 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003462:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	080034bd 	.word	0x080034bd
 800346c:	08003643 	.word	0x08003643
 8003470:	08003643 	.word	0x08003643
 8003474:	08003643 	.word	0x08003643
 8003478:	080034fd 	.word	0x080034fd
 800347c:	08003643 	.word	0x08003643
 8003480:	08003643 	.word	0x08003643
 8003484:	08003643 	.word	0x08003643
 8003488:	0800353f 	.word	0x0800353f
 800348c:	08003643 	.word	0x08003643
 8003490:	08003643 	.word	0x08003643
 8003494:	08003643 	.word	0x08003643
 8003498:	0800357f 	.word	0x0800357f
 800349c:	08003643 	.word	0x08003643
 80034a0:	08003643 	.word	0x08003643
 80034a4:	08003643 	.word	0x08003643
 80034a8:	080035c1 	.word	0x080035c1
 80034ac:	08003643 	.word	0x08003643
 80034b0:	08003643 	.word	0x08003643
 80034b4:	08003643 	.word	0x08003643
 80034b8:	08003601 	.word	0x08003601
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f964 	bl	8003790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0204 	bic.w	r2, r2, #4
 80034e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6999      	ldr	r1, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	619a      	str	r2, [r3, #24]
      break;
 80034fa:	e0a5      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f9d4 	bl	80038b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	619a      	str	r2, [r3, #24]
      break;
 800353c:	e084      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa3d 	bl	80039c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0208 	orr.w	r2, r2, #8
 8003558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69d9      	ldr	r1, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	61da      	str	r2, [r3, #28]
      break;
 800357c:	e064      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 faa5 	bl	8003ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69d9      	ldr	r1, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	021a      	lsls	r2, r3, #8
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	61da      	str	r2, [r3, #28]
      break;
 80035be:	e043      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 faee 	bl	8003ba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035fe:	e023      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb32 	bl	8003c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	021a      	lsls	r2, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003640:	e002      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003650:	7dfb      	ldrb	r3, [r7, #23]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a40      	ldr	r2, [pc, #256]	@ (8003770 <TIM_Base_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d00f      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3d      	ldr	r2, [pc, #244]	@ (8003774 <TIM_Base_SetConfig+0x118>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3c      	ldr	r2, [pc, #240]	@ (8003778 <TIM_Base_SetConfig+0x11c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3b      	ldr	r2, [pc, #236]	@ (800377c <TIM_Base_SetConfig+0x120>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3a      	ldr	r2, [pc, #232]	@ (8003780 <TIM_Base_SetConfig+0x124>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003770 <TIM_Base_SetConfig+0x114>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01f      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036bc:	d01b      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <TIM_Base_SetConfig+0x118>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d017      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003778 <TIM_Base_SetConfig+0x11c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2a      	ldr	r2, [pc, #168]	@ (800377c <TIM_Base_SetConfig+0x120>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a29      	ldr	r2, [pc, #164]	@ (8003780 <TIM_Base_SetConfig+0x124>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <TIM_Base_SetConfig+0x128>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a27      	ldr	r2, [pc, #156]	@ (8003788 <TIM_Base_SetConfig+0x12c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a26      	ldr	r2, [pc, #152]	@ (800378c <TIM_Base_SetConfig+0x130>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <TIM_Base_SetConfig+0x114>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00f      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a12      	ldr	r2, [pc, #72]	@ (8003780 <TIM_Base_SetConfig+0x124>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a11      	ldr	r2, [pc, #68]	@ (8003784 <TIM_Base_SetConfig+0x128>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a10      	ldr	r2, [pc, #64]	@ (8003788 <TIM_Base_SetConfig+0x12c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0f      	ldr	r2, [pc, #60]	@ (800378c <TIM_Base_SetConfig+0x130>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0201 	bic.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <TIM_OC1_SetConfig+0x10c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a2b      	ldr	r2, [pc, #172]	@ (80038a0 <TIM_OC1_SetConfig+0x110>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a2a      	ldr	r2, [pc, #168]	@ (80038a4 <TIM_OC1_SetConfig+0x114>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <TIM_OC1_SetConfig+0x118>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <TIM_OC1_SetConfig+0x11c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10c      	bne.n	800382a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0308 	bic.w	r3, r3, #8
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1b      	ldr	r2, [pc, #108]	@ (800389c <TIM_OC1_SetConfig+0x10c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00f      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1a      	ldr	r2, [pc, #104]	@ (80038a0 <TIM_OC1_SetConfig+0x110>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a19      	ldr	r2, [pc, #100]	@ (80038a4 <TIM_OC1_SetConfig+0x114>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <TIM_OC1_SetConfig+0x118>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a17      	ldr	r2, [pc, #92]	@ (80038ac <TIM_OC1_SetConfig+0x11c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d111      	bne.n	8003876 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f023 0210 	bic.w	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a28      	ldr	r2, [pc, #160]	@ (80039b0 <TIM_OC2_SetConfig+0x100>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_OC2_SetConfig+0x6c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a27      	ldr	r2, [pc, #156]	@ (80039b4 <TIM_OC2_SetConfig+0x104>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10d      	bne.n	8003938 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <TIM_OC2_SetConfig+0x100>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00f      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <TIM_OC2_SetConfig+0x104>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00b      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <TIM_OC2_SetConfig+0x108>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d007      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1a      	ldr	r2, [pc, #104]	@ (80039bc <TIM_OC2_SetConfig+0x10c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a19      	ldr	r2, [pc, #100]	@ (80039c0 <TIM_OC2_SetConfig+0x110>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d113      	bne.n	8003988 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40013400 	.word	0x40013400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800

080039c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a27      	ldr	r2, [pc, #156]	@ (8003ac0 <TIM_OC3_SetConfig+0xfc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_OC3_SetConfig+0x6a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a26      	ldr	r2, [pc, #152]	@ (8003ac4 <TIM_OC3_SetConfig+0x100>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac0 <TIM_OC3_SetConfig+0xfc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac4 <TIM_OC3_SetConfig+0x100>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac8 <TIM_OC3_SetConfig+0x104>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <TIM_OC3_SetConfig+0x108>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <TIM_OC3_SetConfig+0x10c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	031b      	lsls	r3, r3, #12
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <TIM_OC4_SetConfig+0xc0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a17      	ldr	r2, [pc, #92]	@ (8003b98 <TIM_OC4_SetConfig+0xc4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a16      	ldr	r2, [pc, #88]	@ (8003b9c <TIM_OC4_SetConfig+0xc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <TIM_OC4_SetConfig+0xcc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a14      	ldr	r2, [pc, #80]	@ (8003ba4 <TIM_OC4_SetConfig+0xd0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d109      	bne.n	8003b6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40013400 	.word	0x40013400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800

08003ba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003bec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <TIM_OC5_SetConfig+0xb4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00f      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <TIM_OC5_SetConfig+0xb8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00b      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <TIM_OC5_SetConfig+0xbc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a14      	ldr	r2, [pc, #80]	@ (8003c68 <TIM_OC5_SetConfig+0xc0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <TIM_OC5_SetConfig+0xc4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d109      	bne.n	8003c36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40013400 	.word	0x40013400
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800

08003c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	051b      	lsls	r3, r3, #20
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <TIM_OC6_SetConfig+0xb8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00f      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <TIM_OC6_SetConfig+0xbc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	@ (8003d30 <TIM_OC6_SetConfig+0xc0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a15      	ldr	r2, [pc, #84]	@ (8003d34 <TIM_OC6_SetConfig+0xc4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <TIM_OC6_SetConfig+0xc8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d109      	bne.n	8003d00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40013400 	.word	0x40013400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2201      	movs	r2, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e068      	b.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003dda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1e      	ldr	r2, [pc, #120]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d018      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	@ (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	@ (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a14      	ldr	r2, [pc, #80]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10c      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e065      	b.n	8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a16      	ldr	r2, [pc, #88]	@ (8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	@ (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d115      	bne.n	8003f6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	051b      	lsls	r3, r3, #20
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40013400 	.word	0x40013400

08003f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e040      	b.n	8004028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f84e 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fe94 	bl	8004d08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fbd9 	bl	8004798 <UART_SetConfig>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e01b      	b.n	8004028 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800400e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 ff13 	bl	8004e4c <UART_CheckIdleState>
 8004026:	4603      	mov	r3, r0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004030:	b480      	push	{r7}
 8004032:	b08b      	sub	sp, #44	@ 0x2c
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004042:	2b20      	cmp	r3, #32
 8004044:	d147      	bne.n	80040d6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_UART_Transmit_IT+0x22>
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e040      	b.n	80040d8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2221      	movs	r2, #33	@ 0x21
 800407e:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004088:	d107      	bne.n	800409a <HAL_UART_Transmit_IT+0x6a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a13      	ldr	r2, [pc, #76]	@ (80040e4 <HAL_UART_Transmit_IT+0xb4>)
 8004096:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004098:	e002      	b.n	80040a0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a12      	ldr	r2, [pc, #72]	@ (80040e8 <HAL_UART_Transmit_IT+0xb8>)
 800409e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	372c      	adds	r7, #44	@ 0x2c
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	080053a3 	.word	0x080053a3
 80040e8:	080052ed 	.word	0x080052ed

080040ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	@ 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004100:	2b20      	cmp	r3, #32
 8004102:	d137      	bne.n	8004174 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Receive_IT+0x24>
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e030      	b.n	8004176 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <HAL_UART_Receive_IT+0x94>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01f      	beq.n	8004164 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	613b      	str	r3, [r7, #16]
   return(result);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	61bb      	str	r3, [r7, #24]
   return(result);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	461a      	mov	r2, r3
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 ff7e 	bl	800506c <UART_Start_Receive_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	e000      	b.n	8004176 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3728      	adds	r7, #40	@ 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40008000 	.word	0x40008000

08004184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0ba      	sub	sp, #232	@ 0xe8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041b2:	4013      	ands	r3, r2
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d115      	bne.n	80041ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 82ae 	beq.w	800473e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
      }
      return;
 80041ea:	e2a8      	b.n	800473e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80041ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8117 	beq.w	8004424 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004202:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004206:	4b85      	ldr	r3, [pc, #532]	@ (800441c <HAL_UART_IRQHandler+0x298>)
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 810a 	beq.w	8004424 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d011      	beq.n	8004240 <HAL_UART_IRQHandler+0xbc>
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2201      	movs	r2, #1
 800422e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <HAL_UART_IRQHandler+0xec>
 800424c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2202      	movs	r2, #2
 800425e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004266:	f043 0204 	orr.w	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <HAL_UART_IRQHandler+0x11c>
 800427c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2204      	movs	r2, #4
 800428e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004296:	f043 0202 	orr.w	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d017      	beq.n	80042dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2208      	movs	r2, #8
 80042ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d2:	f043 0208 	orr.w	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_UART_IRQHandler+0x18a>
 80042e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00c      	beq.n	800430e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8214 	beq.w	8004742 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800435a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04f      	beq.n	8004406 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 ff46 	bl	80051f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b40      	cmp	r3, #64	@ 0x40
 8004378:	d141      	bne.n	80043fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1d9      	bne.n	800437a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d013      	beq.n	80043f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d2:	4a13      	ldr	r2, [pc, #76]	@ (8004420 <HAL_UART_IRQHandler+0x29c>)
 80043d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd f9a9 	bl	8001732 <HAL_DMA_Abort_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043f0:	4610      	mov	r0, r2
 80043f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	e00f      	b.n	8004416 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9b8 	bl	800476c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	e00b      	b.n	8004416 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9b4 	bl	800476c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e007      	b.n	8004416 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9b0 	bl	800476c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004414:	e195      	b.n	8004742 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004416:	bf00      	nop
    return;
 8004418:	e193      	b.n	8004742 <HAL_UART_IRQHandler+0x5be>
 800441a:	bf00      	nop
 800441c:	04000120 	.word	0x04000120
 8004420:	080052c1 	.word	0x080052c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 814e 	bne.w	80046ca <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8147 	beq.w	80046ca <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8140 	beq.w	80046ca <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2210      	movs	r2, #16
 8004450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	f040 80b8 	bne.w	80045d2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800446e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8167 	beq.w	8004746 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800447e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004482:	429a      	cmp	r2, r3
 8004484:	f080 815f 	bcs.w	8004746 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800448e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8086 	bne.w	80045b0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1da      	bne.n	80044a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004512:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004516:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800451a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e1      	bne.n	80044ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800453a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800453c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800454e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004550:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800455c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e3      	bne.n	800452a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800457e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004580:	f023 0310 	bic.w	r3, r3, #16
 8004584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004594:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004598:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e4      	bne.n	8004570 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd f883 	bl	80016b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8d8 	bl	8004780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045d0:	e0b9      	b.n	8004746 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80ab 	beq.w	800474a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80045f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a6 	beq.w	800474a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004612:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004620:	647b      	str	r3, [r7, #68]	@ 0x44
 8004622:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e4      	bne.n	80045fe <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	623b      	str	r3, [r7, #32]
   return(result);
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004658:	633a      	str	r2, [r7, #48]	@ 0x30
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800465e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e3      	bne.n	8004634 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60fb      	str	r3, [r7, #12]
   return(result);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	617b      	str	r3, [r7, #20]
   return(result);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e4      	bne.n	8004680 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f85c 	bl	8004780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c8:	e03f      	b.n	800474a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <HAL_UART_IRQHandler+0x570>
 80046d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f89f 	bl	8005830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046f2:	e02d      	b.n	8004750 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
    }
    return;
 800471c:	e017      	b.n	800474e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d012      	beq.n	8004750 <HAL_UART_IRQHandler+0x5cc>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fe93 	bl	8005462 <UART_EndTransmit_IT>
    return;
 800473c:	e008      	b.n	8004750 <HAL_UART_IRQHandler+0x5cc>
      return;
 800473e:	bf00      	nop
 8004740:	e006      	b.n	8004750 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004742:	bf00      	nop
 8004744:	e004      	b.n	8004750 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <HAL_UART_IRQHandler+0x5cc>
      return;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_UART_IRQHandler+0x5cc>
    return;
 800474e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004750:	37e8      	adds	r7, #232	@ 0xe8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop

08004758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800479c:	b08a      	sub	sp, #40	@ 0x28
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4313      	orrs	r3, r2
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	4ba4      	ldr	r3, [pc, #656]	@ (8004a58 <UART_SetConfig+0x2c0>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a99      	ldr	r2, [pc, #612]	@ (8004a5c <UART_SetConfig+0x2c4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004800:	4313      	orrs	r3, r2
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a90      	ldr	r2, [pc, #576]	@ (8004a60 <UART_SetConfig+0x2c8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d126      	bne.n	8004870 <UART_SetConfig+0xd8>
 8004822:	4b90      	ldr	r3, [pc, #576]	@ (8004a64 <UART_SetConfig+0x2cc>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b03      	cmp	r3, #3
 800482e:	d81b      	bhi.n	8004868 <UART_SetConfig+0xd0>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <UART_SetConfig+0xa0>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	08004849 	.word	0x08004849
 800483c:	08004859 	.word	0x08004859
 8004840:	08004851 	.word	0x08004851
 8004844:	08004861 	.word	0x08004861
 8004848:	2301      	movs	r3, #1
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e116      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e112      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e10e      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e10a      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e106      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7c      	ldr	r2, [pc, #496]	@ (8004a68 <UART_SetConfig+0x2d0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d138      	bne.n	80048ec <UART_SetConfig+0x154>
 800487a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a64 <UART_SetConfig+0x2cc>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d82d      	bhi.n	80048e4 <UART_SetConfig+0x14c>
 8004888:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <UART_SetConfig+0xf8>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048c5 	.word	0x080048c5
 8004894:	080048e5 	.word	0x080048e5
 8004898:	080048e5 	.word	0x080048e5
 800489c:	080048e5 	.word	0x080048e5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048e5 	.word	0x080048e5
 80048ac:	080048e5 	.word	0x080048e5
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	080048e5 	.word	0x080048e5
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ca:	e0d8      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d2:	e0d4      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e0d0      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e0cc      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e0c8      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a6c <UART_SetConfig+0x2d4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d125      	bne.n	8004942 <UART_SetConfig+0x1aa>
 80048f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a64 <UART_SetConfig+0x2cc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004900:	2b30      	cmp	r3, #48	@ 0x30
 8004902:	d016      	beq.n	8004932 <UART_SetConfig+0x19a>
 8004904:	2b30      	cmp	r3, #48	@ 0x30
 8004906:	d818      	bhi.n	800493a <UART_SetConfig+0x1a2>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d00a      	beq.n	8004922 <UART_SetConfig+0x18a>
 800490c:	2b20      	cmp	r3, #32
 800490e:	d814      	bhi.n	800493a <UART_SetConfig+0x1a2>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <UART_SetConfig+0x182>
 8004914:	2b10      	cmp	r3, #16
 8004916:	d008      	beq.n	800492a <UART_SetConfig+0x192>
 8004918:	e00f      	b.n	800493a <UART_SetConfig+0x1a2>
 800491a:	2300      	movs	r3, #0
 800491c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004920:	e0ad      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004922:	2302      	movs	r3, #2
 8004924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004928:	e0a9      	b.n	8004a7e <UART_SetConfig+0x2e6>
 800492a:	2304      	movs	r3, #4
 800492c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004930:	e0a5      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004932:	2308      	movs	r3, #8
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004938:	e0a1      	b.n	8004a7e <UART_SetConfig+0x2e6>
 800493a:	2310      	movs	r3, #16
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004940:	e09d      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4a      	ldr	r2, [pc, #296]	@ (8004a70 <UART_SetConfig+0x2d8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d125      	bne.n	8004998 <UART_SetConfig+0x200>
 800494c:	4b45      	ldr	r3, [pc, #276]	@ (8004a64 <UART_SetConfig+0x2cc>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004956:	2bc0      	cmp	r3, #192	@ 0xc0
 8004958:	d016      	beq.n	8004988 <UART_SetConfig+0x1f0>
 800495a:	2bc0      	cmp	r3, #192	@ 0xc0
 800495c:	d818      	bhi.n	8004990 <UART_SetConfig+0x1f8>
 800495e:	2b80      	cmp	r3, #128	@ 0x80
 8004960:	d00a      	beq.n	8004978 <UART_SetConfig+0x1e0>
 8004962:	2b80      	cmp	r3, #128	@ 0x80
 8004964:	d814      	bhi.n	8004990 <UART_SetConfig+0x1f8>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <UART_SetConfig+0x1d8>
 800496a:	2b40      	cmp	r3, #64	@ 0x40
 800496c:	d008      	beq.n	8004980 <UART_SetConfig+0x1e8>
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x1f8>
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004976:	e082      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004978:	2302      	movs	r3, #2
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497e:	e07e      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004986:	e07a      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498e:	e076      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e072      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a35      	ldr	r2, [pc, #212]	@ (8004a74 <UART_SetConfig+0x2dc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d12a      	bne.n	80049f8 <UART_SetConfig+0x260>
 80049a2:	4b30      	ldr	r3, [pc, #192]	@ (8004a64 <UART_SetConfig+0x2cc>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049b0:	d01a      	beq.n	80049e8 <UART_SetConfig+0x250>
 80049b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049b6:	d81b      	bhi.n	80049f0 <UART_SetConfig+0x258>
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049bc:	d00c      	beq.n	80049d8 <UART_SetConfig+0x240>
 80049be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049c2:	d815      	bhi.n	80049f0 <UART_SetConfig+0x258>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <UART_SetConfig+0x238>
 80049c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049cc:	d008      	beq.n	80049e0 <UART_SetConfig+0x248>
 80049ce:	e00f      	b.n	80049f0 <UART_SetConfig+0x258>
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d6:	e052      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80049d8:	2302      	movs	r3, #2
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049de:	e04e      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80049e0:	2304      	movs	r3, #4
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e04a      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80049e8:	2308      	movs	r3, #8
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e046      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80049f0:	2310      	movs	r3, #16
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e042      	b.n	8004a7e <UART_SetConfig+0x2e6>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a17      	ldr	r2, [pc, #92]	@ (8004a5c <UART_SetConfig+0x2c4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d13a      	bne.n	8004a78 <UART_SetConfig+0x2e0>
 8004a02:	4b18      	ldr	r3, [pc, #96]	@ (8004a64 <UART_SetConfig+0x2cc>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a10:	d01a      	beq.n	8004a48 <UART_SetConfig+0x2b0>
 8004a12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a16:	d81b      	bhi.n	8004a50 <UART_SetConfig+0x2b8>
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1c:	d00c      	beq.n	8004a38 <UART_SetConfig+0x2a0>
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a22:	d815      	bhi.n	8004a50 <UART_SetConfig+0x2b8>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <UART_SetConfig+0x298>
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2c:	d008      	beq.n	8004a40 <UART_SetConfig+0x2a8>
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x2b8>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a36:	e022      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3e:	e01e      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e01a      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e016      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e012      	b.n	8004a7e <UART_SetConfig+0x2e6>
 8004a58:	efff69f3 	.word	0xefff69f3
 8004a5c:	40008000 	.word	0x40008000
 8004a60:	40013800 	.word	0x40013800
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40004400 	.word	0x40004400
 8004a6c:	40004800 	.word	0x40004800
 8004a70:	40004c00 	.word	0x40004c00
 8004a74:	40005000 	.word	0x40005000
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a9f      	ldr	r2, [pc, #636]	@ (8004d00 <UART_SetConfig+0x568>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d17a      	bne.n	8004b7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d824      	bhi.n	8004ada <UART_SetConfig+0x342>
 8004a90:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <UART_SetConfig+0x300>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004acb 	.word	0x08004acb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004adb 	.word	0x08004adb
 8004ab4:	08004adb 	.word	0x08004adb
 8004ab8:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fd fe14 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	61f8      	str	r0, [r7, #28]
        break;
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d04 <UART_SetConfig+0x56c>)
 8004ac6:	61fb      	str	r3, [r7, #28]
        break;
 8004ac8:	e00d      	b.n	8004ae6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fd fd75 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8004ace:	61f8      	str	r0, [r7, #28]
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ae4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80fb 	beq.w	8004ce4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d305      	bcc.n	8004b0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d903      	bls.n	8004b12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b10:	e0e8      	b.n	8004ce4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	2200      	movs	r2, #0
 8004b16:	461c      	mov	r4, r3
 8004b18:	4615      	mov	r5, r2
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	022b      	lsls	r3, r5, #8
 8004b24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b28:	0222      	lsls	r2, r4, #8
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	6849      	ldr	r1, [r1, #4]
 8004b2e:	0849      	lsrs	r1, r1, #1
 8004b30:	2000      	movs	r0, #0
 8004b32:	4688      	mov	r8, r1
 8004b34:	4681      	mov	r9, r0
 8004b36:	eb12 0a08 	adds.w	sl, r2, r8
 8004b3a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	4659      	mov	r1, fp
 8004b50:	f7fb fb96 	bl	8000280 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b62:	d308      	bcc.n	8004b76 <UART_SetConfig+0x3de>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6a:	d204      	bcs.n	8004b76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	60da      	str	r2, [r3, #12]
 8004b74:	e0b6      	b.n	8004ce4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b7c:	e0b2      	b.n	8004ce4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b86:	d15e      	bne.n	8004c46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d828      	bhi.n	8004be2 <UART_SetConfig+0x44a>
 8004b90:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <UART_SetConfig+0x400>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bcd 	.word	0x08004bcd
 8004ba4:	08004be3 	.word	0x08004be3
 8004ba8:	08004bd3 	.word	0x08004bd3
 8004bac:	08004be3 	.word	0x08004be3
 8004bb0:	08004be3 	.word	0x08004be3
 8004bb4:	08004be3 	.word	0x08004be3
 8004bb8:	08004bdb 	.word	0x08004bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f7fd fd94 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	61f8      	str	r0, [r7, #28]
        break;
 8004bc2:	e014      	b.n	8004bee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7fd fda6 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8004bc8:	61f8      	str	r0, [r7, #28]
        break;
 8004bca:	e010      	b.n	8004bee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8004d04 <UART_SetConfig+0x56c>)
 8004bce:	61fb      	str	r3, [r7, #28]
        break;
 8004bd0:	e00d      	b.n	8004bee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd2:	f7fd fcf1 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8004bd6:	61f8      	str	r0, [r7, #28]
        break;
 8004bd8:	e009      	b.n	8004bee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bde:	61fb      	str	r3, [r7, #28]
        break;
 8004be0:	e005      	b.n	8004bee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d077      	beq.n	8004ce4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005a      	lsls	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	441a      	add	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b0f      	cmp	r3, #15
 8004c0e:	d916      	bls.n	8004c3e <UART_SetConfig+0x4a6>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c16:	d212      	bcs.n	8004c3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f023 030f 	bic.w	r3, r3, #15
 8004c20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	8afa      	ldrh	r2, [r7, #22]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e052      	b.n	8004ce4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c44:	e04e      	b.n	8004ce4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d827      	bhi.n	8004c9e <UART_SetConfig+0x506>
 8004c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c54 <UART_SetConfig+0x4bc>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c9f 	.word	0x08004c9f
 8004c64:	08004c8f 	.word	0x08004c8f
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004c9f 	.word	0x08004c9f
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	08004c97 	.word	0x08004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c78:	f7fd fd36 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	61f8      	str	r0, [r7, #28]
        break;
 8004c7e:	e014      	b.n	8004caa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c80:	f7fd fd48 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8004c84:	61f8      	str	r0, [r7, #28]
        break;
 8004c86:	e010      	b.n	8004caa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c88:	4b1e      	ldr	r3, [pc, #120]	@ (8004d04 <UART_SetConfig+0x56c>)
 8004c8a:	61fb      	str	r3, [r7, #28]
        break;
 8004c8c:	e00d      	b.n	8004caa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7fd fc93 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8004c92:	61f8      	str	r0, [r7, #28]
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d019      	beq.n	8004ce4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	085a      	lsrs	r2, r3, #1
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d909      	bls.n	8004cde <UART_SetConfig+0x546>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd0:	d205      	bcs.n	8004cde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60da      	str	r2, [r3, #12]
 8004cdc:	e002      	b.n	8004ce4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3728      	adds	r7, #40	@ 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	40008000 	.word	0x40008000
 8004d04:	00f42400 	.word	0x00f42400

08004d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e06:	d10a      	bne.n	8004e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b098      	sub	sp, #96	@ 0x60
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e5c:	f7fc faea 	bl	8001434 <HAL_GetTick>
 8004e60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d12e      	bne.n	8004ece <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f88c 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d021      	beq.n	8004ece <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e6      	bne.n	8004e8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e062      	b.n	8004f94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d149      	bne.n	8004f70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004edc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f856 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03c      	beq.n	8004f70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	623b      	str	r3, [r7, #32]
   return(result);
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3308      	adds	r3, #8
 8004f46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f48:	61fa      	str	r2, [r7, #28]
 8004f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	69b9      	ldr	r1, [r7, #24]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	617b      	str	r3, [r7, #20]
   return(result);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e011      	b.n	8004f94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3758      	adds	r7, #88	@ 0x58
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fac:	e049      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d045      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb6:	f7fc fa3d 	bl	8001434 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d302      	bcc.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e048      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d031      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d110      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f8ff 	bl	80051f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e029      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800501c:	d111      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f8e5 	bl	80051f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e00f      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d0a6      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800506c:	b480      	push	{r7}
 800506e:	b097      	sub	sp, #92	@ 0x5c
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509e:	d10e      	bne.n	80050be <UART_Start_Receive_IT+0x52>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <UART_Start_Receive_IT+0x48>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80050ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050b2:	e02d      	b.n	8005110 <UART_Start_Receive_IT+0xa4>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	22ff      	movs	r2, #255	@ 0xff
 80050b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050bc:	e028      	b.n	8005110 <UART_Start_Receive_IT+0xa4>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <UART_Start_Receive_IT+0x76>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <UART_Start_Receive_IT+0x6c>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	22ff      	movs	r2, #255	@ 0xff
 80050d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050d6:	e01b      	b.n	8005110 <UART_Start_Receive_IT+0xa4>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	227f      	movs	r2, #127	@ 0x7f
 80050dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050e0:	e016      	b.n	8005110 <UART_Start_Receive_IT+0xa4>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050ea:	d10d      	bne.n	8005108 <UART_Start_Receive_IT+0x9c>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <UART_Start_Receive_IT+0x92>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	227f      	movs	r2, #127	@ 0x7f
 80050f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050fc:	e008      	b.n	8005110 <UART_Start_Receive_IT+0xa4>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	223f      	movs	r2, #63	@ 0x3f
 8005102:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005106:	e003      	b.n	8005110 <UART_Start_Receive_IT+0xa4>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2222      	movs	r2, #34	@ 0x22
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	657b      	str	r3, [r7, #84]	@ 0x54
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005140:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005142:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515c:	d107      	bne.n	800516e <UART_Start_Receive_IT+0x102>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4a21      	ldr	r2, [pc, #132]	@ (80051f0 <UART_Start_Receive_IT+0x184>)
 800516a:	669a      	str	r2, [r3, #104]	@ 0x68
 800516c:	e002      	b.n	8005174 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a20      	ldr	r2, [pc, #128]	@ (80051f4 <UART_Start_Receive_IT+0x188>)
 8005172:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d019      	beq.n	80051b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
 800519c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <UART_Start_Receive_IT+0x110>
 80051ae:	e018      	b.n	80051e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	613b      	str	r3, [r7, #16]
   return(result);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f043 0320 	orr.w	r3, r3, #32
 80051c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	61bb      	str	r3, [r7, #24]
   return(result);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	375c      	adds	r7, #92	@ 0x5c
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	08005675 	.word	0x08005675
 80051f4:	080054b9 	.word	0x080054b9

080051f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b095      	sub	sp, #84	@ 0x54
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005220:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	61fb      	str	r3, [r7, #28]
   return(result);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526a:	2b01      	cmp	r3, #1
 800526c:	d118      	bne.n	80052a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	60bb      	str	r3, [r7, #8]
   return(result);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f023 0310 	bic.w	r3, r3, #16
 8005282:	647b      	str	r3, [r7, #68]	@ 0x44
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6979      	ldr	r1, [r7, #20]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	613b      	str	r3, [r7, #16]
   return(result);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052b4:	bf00      	nop
 80052b6:	3754      	adds	r7, #84	@ 0x54
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fa44 	bl	800476c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b08f      	sub	sp, #60	@ 0x3c
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052f8:	2b21      	cmp	r3, #33	@ 0x21
 80052fa:	d14c      	bne.n	8005396 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d132      	bne.n	800536e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	61fb      	str	r3, [r7, #28]
   return(result);
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005328:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e6      	bne.n	8005308 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	60bb      	str	r3, [r7, #8]
   return(result);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800534e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e6      	bne.n	800533a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800536c:	e013      	b.n	8005396 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005396:	bf00      	nop
 8005398:	373c      	adds	r7, #60	@ 0x3c
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b091      	sub	sp, #68	@ 0x44
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ae:	2b21      	cmp	r3, #33	@ 0x21
 80053b0:	d151      	bne.n	8005456 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d132      	bne.n	8005424 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	623b      	str	r3, [r7, #32]
   return(result);
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	69b9      	ldr	r1, [r7, #24]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	617b      	str	r3, [r7, #20]
   return(result);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e6      	bne.n	80053f0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005422:	e018      	b.n	8005456 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005428:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800542a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005436:	b292      	uxth	r2, r2
 8005438:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005456:	bf00      	nop
 8005458:	3744      	adds	r7, #68	@ 0x44
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	60bb      	str	r3, [r7, #8]
   return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	613b      	str	r3, [r7, #16]
   return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff f955 	bl	8004758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ae:	bf00      	nop
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b09c      	sub	sp, #112	@ 0x70
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d0:	2b22      	cmp	r3, #34	@ 0x22
 80054d2:	f040 80be 	bne.w	8005652 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054e4:	b2d9      	uxtb	r1, r3
 80054e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	400a      	ands	r2, r1
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 80a3 	bne.w	8005666 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800552e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800553e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005540:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800554c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	667b      	str	r3, [r7, #100]	@ 0x64
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005572:	647a      	str	r2, [r7, #68]	@ 0x44
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a34      	ldr	r2, [pc, #208]	@ (8005670 <UART_RxISR_8BIT+0x1b8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01f      	beq.n	80055e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d018      	beq.n	80055e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	623b      	str	r3, [r7, #32]
   return(result);
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d12e      	bne.n	800564a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0310 	bic.w	r3, r3, #16
 8005606:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	617b      	str	r3, [r7, #20]
   return(result);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e6      	bne.n	80055f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b10      	cmp	r3, #16
 8005630:	d103      	bne.n	800563a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff f89c 	bl	8004780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005648:	e00d      	b.n	8005666 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fb fb9a 	bl	8000d84 <HAL_UART_RxCpltCallback>
}
 8005650:	e009      	b.n	8005666 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	8b1b      	ldrh	r3, [r3, #24]
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0208 	orr.w	r2, r2, #8
 8005662:	b292      	uxth	r2, r2
 8005664:	831a      	strh	r2, [r3, #24]
}
 8005666:	bf00      	nop
 8005668:	3770      	adds	r7, #112	@ 0x70
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40008000 	.word	0x40008000

08005674 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b09c      	sub	sp, #112	@ 0x70
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005682:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568c:	2b22      	cmp	r3, #34	@ 0x22
 800568e:	f040 80be 	bne.w	800580e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005698:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80056a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056aa:	4013      	ands	r3, r2
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 80a3 	bne.w	8005822 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80056fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	663b      	str	r3, [r7, #96]	@ 0x60
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800572e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a34      	ldr	r2, [pc, #208]	@ (800582c <UART_RxISR_16BIT+0x1b8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d01f      	beq.n	80057a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	61fb      	str	r3, [r7, #28]
   return(result);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800578c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800578e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e6      	bne.n	800576e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d12e      	bne.n	8005806 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0310 	bic.w	r3, r3, #16
 80057c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	613b      	str	r3, [r7, #16]
   return(result);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d103      	bne.n	80057f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2210      	movs	r2, #16
 80057f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fe ffbe 	bl	8004780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005804:	e00d      	b.n	8005822 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fb fabc 	bl	8000d84 <HAL_UART_RxCpltCallback>
}
 800580c:	e009      	b.n	8005822 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	8b1b      	ldrh	r3, [r3, #24]
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	b292      	uxth	r2, r2
 8005820:	831a      	strh	r2, [r3, #24]
}
 8005822:	bf00      	nop
 8005824:	3770      	adds	r7, #112	@ 0x70
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40008000 	.word	0x40008000

08005830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <_strtol_l.constprop.0>:
 8005844:	2b24      	cmp	r3, #36	@ 0x24
 8005846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584a:	4686      	mov	lr, r0
 800584c:	4690      	mov	r8, r2
 800584e:	d801      	bhi.n	8005854 <_strtol_l.constprop.0+0x10>
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <_strtol_l.constprop.0+0x1e>
 8005854:	f000 fa1c 	bl	8005c90 <__errno>
 8005858:	2316      	movs	r3, #22
 800585a:	6003      	str	r3, [r0, #0]
 800585c:	2000      	movs	r0, #0
 800585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005862:	4834      	ldr	r0, [pc, #208]	@ (8005934 <_strtol_l.constprop.0+0xf0>)
 8005864:	460d      	mov	r5, r1
 8005866:	462a      	mov	r2, r5
 8005868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800586c:	5d06      	ldrb	r6, [r0, r4]
 800586e:	f016 0608 	ands.w	r6, r6, #8
 8005872:	d1f8      	bne.n	8005866 <_strtol_l.constprop.0+0x22>
 8005874:	2c2d      	cmp	r4, #45	@ 0x2d
 8005876:	d12d      	bne.n	80058d4 <_strtol_l.constprop.0+0x90>
 8005878:	782c      	ldrb	r4, [r5, #0]
 800587a:	2601      	movs	r6, #1
 800587c:	1c95      	adds	r5, r2, #2
 800587e:	f033 0210 	bics.w	r2, r3, #16
 8005882:	d109      	bne.n	8005898 <_strtol_l.constprop.0+0x54>
 8005884:	2c30      	cmp	r4, #48	@ 0x30
 8005886:	d12a      	bne.n	80058de <_strtol_l.constprop.0+0x9a>
 8005888:	782a      	ldrb	r2, [r5, #0]
 800588a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800588e:	2a58      	cmp	r2, #88	@ 0x58
 8005890:	d125      	bne.n	80058de <_strtol_l.constprop.0+0x9a>
 8005892:	786c      	ldrb	r4, [r5, #1]
 8005894:	2310      	movs	r3, #16
 8005896:	3502      	adds	r5, #2
 8005898:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800589c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058a0:	2200      	movs	r2, #0
 80058a2:	fbbc f9f3 	udiv	r9, ip, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80058ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058b0:	2f09      	cmp	r7, #9
 80058b2:	d81b      	bhi.n	80058ec <_strtol_l.constprop.0+0xa8>
 80058b4:	463c      	mov	r4, r7
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	dd27      	ble.n	800590a <_strtol_l.constprop.0+0xc6>
 80058ba:	1c57      	adds	r7, r2, #1
 80058bc:	d007      	beq.n	80058ce <_strtol_l.constprop.0+0x8a>
 80058be:	4581      	cmp	r9, r0
 80058c0:	d320      	bcc.n	8005904 <_strtol_l.constprop.0+0xc0>
 80058c2:	d101      	bne.n	80058c8 <_strtol_l.constprop.0+0x84>
 80058c4:	45a2      	cmp	sl, r4
 80058c6:	db1d      	blt.n	8005904 <_strtol_l.constprop.0+0xc0>
 80058c8:	fb00 4003 	mla	r0, r0, r3, r4
 80058cc:	2201      	movs	r2, #1
 80058ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058d2:	e7eb      	b.n	80058ac <_strtol_l.constprop.0+0x68>
 80058d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80058d6:	bf04      	itt	eq
 80058d8:	782c      	ldrbeq	r4, [r5, #0]
 80058da:	1c95      	addeq	r5, r2, #2
 80058dc:	e7cf      	b.n	800587e <_strtol_l.constprop.0+0x3a>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1da      	bne.n	8005898 <_strtol_l.constprop.0+0x54>
 80058e2:	2c30      	cmp	r4, #48	@ 0x30
 80058e4:	bf0c      	ite	eq
 80058e6:	2308      	moveq	r3, #8
 80058e8:	230a      	movne	r3, #10
 80058ea:	e7d5      	b.n	8005898 <_strtol_l.constprop.0+0x54>
 80058ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058f0:	2f19      	cmp	r7, #25
 80058f2:	d801      	bhi.n	80058f8 <_strtol_l.constprop.0+0xb4>
 80058f4:	3c37      	subs	r4, #55	@ 0x37
 80058f6:	e7de      	b.n	80058b6 <_strtol_l.constprop.0+0x72>
 80058f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058fc:	2f19      	cmp	r7, #25
 80058fe:	d804      	bhi.n	800590a <_strtol_l.constprop.0+0xc6>
 8005900:	3c57      	subs	r4, #87	@ 0x57
 8005902:	e7d8      	b.n	80058b6 <_strtol_l.constprop.0+0x72>
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	e7e1      	b.n	80058ce <_strtol_l.constprop.0+0x8a>
 800590a:	1c53      	adds	r3, r2, #1
 800590c:	d108      	bne.n	8005920 <_strtol_l.constprop.0+0xdc>
 800590e:	2322      	movs	r3, #34	@ 0x22
 8005910:	f8ce 3000 	str.w	r3, [lr]
 8005914:	4660      	mov	r0, ip
 8005916:	f1b8 0f00 	cmp.w	r8, #0
 800591a:	d0a0      	beq.n	800585e <_strtol_l.constprop.0+0x1a>
 800591c:	1e69      	subs	r1, r5, #1
 800591e:	e006      	b.n	800592e <_strtol_l.constprop.0+0xea>
 8005920:	b106      	cbz	r6, 8005924 <_strtol_l.constprop.0+0xe0>
 8005922:	4240      	negs	r0, r0
 8005924:	f1b8 0f00 	cmp.w	r8, #0
 8005928:	d099      	beq.n	800585e <_strtol_l.constprop.0+0x1a>
 800592a:	2a00      	cmp	r2, #0
 800592c:	d1f6      	bne.n	800591c <_strtol_l.constprop.0+0xd8>
 800592e:	f8c8 1000 	str.w	r1, [r8]
 8005932:	e794      	b.n	800585e <_strtol_l.constprop.0+0x1a>
 8005934:	08006ed9 	.word	0x08006ed9

08005938 <strtol>:
 8005938:	4613      	mov	r3, r2
 800593a:	460a      	mov	r2, r1
 800593c:	4601      	mov	r1, r0
 800593e:	4802      	ldr	r0, [pc, #8]	@ (8005948 <strtol+0x10>)
 8005940:	6800      	ldr	r0, [r0, #0]
 8005942:	f7ff bf7f 	b.w	8005844 <_strtol_l.constprop.0>
 8005946:	bf00      	nop
 8005948:	20000018 	.word	0x20000018

0800594c <std>:
 800594c:	2300      	movs	r3, #0
 800594e:	b510      	push	{r4, lr}
 8005950:	4604      	mov	r4, r0
 8005952:	e9c0 3300 	strd	r3, r3, [r0]
 8005956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595a:	6083      	str	r3, [r0, #8]
 800595c:	8181      	strh	r1, [r0, #12]
 800595e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005960:	81c2      	strh	r2, [r0, #14]
 8005962:	6183      	str	r3, [r0, #24]
 8005964:	4619      	mov	r1, r3
 8005966:	2208      	movs	r2, #8
 8005968:	305c      	adds	r0, #92	@ 0x5c
 800596a:	f000 f926 	bl	8005bba <memset>
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <std+0x58>)
 8005970:	6263      	str	r3, [r4, #36]	@ 0x24
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <std+0x5c>)
 8005974:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <std+0x60>)
 8005978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <std+0x64>)
 800597c:	6323      	str	r3, [r4, #48]	@ 0x30
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <std+0x68>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	429c      	cmp	r4, r3
 8005984:	d006      	beq.n	8005994 <std+0x48>
 8005986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800598a:	4294      	cmp	r4, r2
 800598c:	d002      	beq.n	8005994 <std+0x48>
 800598e:	33d0      	adds	r3, #208	@ 0xd0
 8005990:	429c      	cmp	r4, r3
 8005992:	d105      	bne.n	80059a0 <std+0x54>
 8005994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599c:	f000 b9a2 	b.w	8005ce4 <__retarget_lock_init_recursive>
 80059a0:	bd10      	pop	{r4, pc}
 80059a2:	bf00      	nop
 80059a4:	08005b35 	.word	0x08005b35
 80059a8:	08005b57 	.word	0x08005b57
 80059ac:	08005b8f 	.word	0x08005b8f
 80059b0:	08005bb3 	.word	0x08005bb3
 80059b4:	20000164 	.word	0x20000164

080059b8 <stdio_exit_handler>:
 80059b8:	4a02      	ldr	r2, [pc, #8]	@ (80059c4 <stdio_exit_handler+0xc>)
 80059ba:	4903      	ldr	r1, [pc, #12]	@ (80059c8 <stdio_exit_handler+0x10>)
 80059bc:	4803      	ldr	r0, [pc, #12]	@ (80059cc <stdio_exit_handler+0x14>)
 80059be:	f000 b869 	b.w	8005a94 <_fwalk_sglue>
 80059c2:	bf00      	nop
 80059c4:	2000000c 	.word	0x2000000c
 80059c8:	08006835 	.word	0x08006835
 80059cc:	2000001c 	.word	0x2000001c

080059d0 <cleanup_stdio>:
 80059d0:	6841      	ldr	r1, [r0, #4]
 80059d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <cleanup_stdio+0x34>)
 80059d4:	4299      	cmp	r1, r3
 80059d6:	b510      	push	{r4, lr}
 80059d8:	4604      	mov	r4, r0
 80059da:	d001      	beq.n	80059e0 <cleanup_stdio+0x10>
 80059dc:	f000 ff2a 	bl	8006834 <_fflush_r>
 80059e0:	68a1      	ldr	r1, [r4, #8]
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <cleanup_stdio+0x38>)
 80059e4:	4299      	cmp	r1, r3
 80059e6:	d002      	beq.n	80059ee <cleanup_stdio+0x1e>
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 ff23 	bl	8006834 <_fflush_r>
 80059ee:	68e1      	ldr	r1, [r4, #12]
 80059f0:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <cleanup_stdio+0x3c>)
 80059f2:	4299      	cmp	r1, r3
 80059f4:	d004      	beq.n	8005a00 <cleanup_stdio+0x30>
 80059f6:	4620      	mov	r0, r4
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	f000 bf1a 	b.w	8006834 <_fflush_r>
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	bf00      	nop
 8005a04:	20000164 	.word	0x20000164
 8005a08:	200001cc 	.word	0x200001cc
 8005a0c:	20000234 	.word	0x20000234

08005a10 <global_stdio_init.part.0>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <global_stdio_init.part.0+0x30>)
 8005a14:	4c0b      	ldr	r4, [pc, #44]	@ (8005a44 <global_stdio_init.part.0+0x34>)
 8005a16:	4a0c      	ldr	r2, [pc, #48]	@ (8005a48 <global_stdio_init.part.0+0x38>)
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2104      	movs	r1, #4
 8005a20:	f7ff ff94 	bl	800594c <std>
 8005a24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a28:	2201      	movs	r2, #1
 8005a2a:	2109      	movs	r1, #9
 8005a2c:	f7ff ff8e 	bl	800594c <std>
 8005a30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a34:	2202      	movs	r2, #2
 8005a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3a:	2112      	movs	r1, #18
 8005a3c:	f7ff bf86 	b.w	800594c <std>
 8005a40:	2000029c 	.word	0x2000029c
 8005a44:	20000164 	.word	0x20000164
 8005a48:	080059b9 	.word	0x080059b9

08005a4c <__sfp_lock_acquire>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	@ (8005a54 <__sfp_lock_acquire+0x8>)
 8005a4e:	f000 b94a 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8005a52:	bf00      	nop
 8005a54:	200002a5 	.word	0x200002a5

08005a58 <__sfp_lock_release>:
 8005a58:	4801      	ldr	r0, [pc, #4]	@ (8005a60 <__sfp_lock_release+0x8>)
 8005a5a:	f000 b945 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8005a5e:	bf00      	nop
 8005a60:	200002a5 	.word	0x200002a5

08005a64 <__sinit>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	4604      	mov	r4, r0
 8005a68:	f7ff fff0 	bl	8005a4c <__sfp_lock_acquire>
 8005a6c:	6a23      	ldr	r3, [r4, #32]
 8005a6e:	b11b      	cbz	r3, 8005a78 <__sinit+0x14>
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	f7ff bff0 	b.w	8005a58 <__sfp_lock_release>
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <__sinit+0x28>)
 8005a7a:	6223      	str	r3, [r4, #32]
 8005a7c:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <__sinit+0x2c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f5      	bne.n	8005a70 <__sinit+0xc>
 8005a84:	f7ff ffc4 	bl	8005a10 <global_stdio_init.part.0>
 8005a88:	e7f2      	b.n	8005a70 <__sinit+0xc>
 8005a8a:	bf00      	nop
 8005a8c:	080059d1 	.word	0x080059d1
 8005a90:	2000029c 	.word	0x2000029c

08005a94 <_fwalk_sglue>:
 8005a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	4607      	mov	r7, r0
 8005a9a:	4688      	mov	r8, r1
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8005aa8:	d505      	bpl.n	8005ab6 <_fwalk_sglue+0x22>
 8005aaa:	6824      	ldr	r4, [r4, #0]
 8005aac:	2c00      	cmp	r4, #0
 8005aae:	d1f7      	bne.n	8005aa0 <_fwalk_sglue+0xc>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d907      	bls.n	8005acc <_fwalk_sglue+0x38>
 8005abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	d003      	beq.n	8005acc <_fwalk_sglue+0x38>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	47c0      	blx	r8
 8005aca:	4306      	orrs	r6, r0
 8005acc:	3568      	adds	r5, #104	@ 0x68
 8005ace:	e7e9      	b.n	8005aa4 <_fwalk_sglue+0x10>

08005ad0 <iprintf>:
 8005ad0:	b40f      	push	{r0, r1, r2, r3}
 8005ad2:	b507      	push	{r0, r1, r2, lr}
 8005ad4:	4906      	ldr	r1, [pc, #24]	@ (8005af0 <iprintf+0x20>)
 8005ad6:	ab04      	add	r3, sp, #16
 8005ad8:	6808      	ldr	r0, [r1, #0]
 8005ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ade:	6881      	ldr	r1, [r0, #8]
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	f000 fb7d 	bl	80061e0 <_vfiprintf_r>
 8005ae6:	b003      	add	sp, #12
 8005ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aec:	b004      	add	sp, #16
 8005aee:	4770      	bx	lr
 8005af0:	20000018 	.word	0x20000018

08005af4 <siprintf>:
 8005af4:	b40e      	push	{r1, r2, r3}
 8005af6:	b500      	push	{lr}
 8005af8:	b09c      	sub	sp, #112	@ 0x70
 8005afa:	ab1d      	add	r3, sp, #116	@ 0x74
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	9006      	str	r0, [sp, #24]
 8005b00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b04:	4809      	ldr	r0, [pc, #36]	@ (8005b2c <siprintf+0x38>)
 8005b06:	9107      	str	r1, [sp, #28]
 8005b08:	9104      	str	r1, [sp, #16]
 8005b0a:	4909      	ldr	r1, [pc, #36]	@ (8005b30 <siprintf+0x3c>)
 8005b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b10:	9105      	str	r1, [sp, #20]
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	a902      	add	r1, sp, #8
 8005b18:	f000 fa3c 	bl	8005f94 <_svfiprintf_r>
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	b01c      	add	sp, #112	@ 0x70
 8005b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b28:	b003      	add	sp, #12
 8005b2a:	4770      	bx	lr
 8005b2c:	20000018 	.word	0x20000018
 8005b30:	ffff0208 	.word	0xffff0208

08005b34 <__sread>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	f000 f884 	bl	8005c48 <_read_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	bfab      	itete	ge
 8005b44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b46:	89a3      	ldrhlt	r3, [r4, #12]
 8005b48:	181b      	addge	r3, r3, r0
 8005b4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b4e:	bfac      	ite	ge
 8005b50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b52:	81a3      	strhlt	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__swrite>:
 8005b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	898b      	ldrh	r3, [r1, #12]
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	4605      	mov	r5, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	4616      	mov	r6, r2
 8005b66:	d505      	bpl.n	8005b74 <__swrite+0x1e>
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f000 f858 	bl	8005c24 <_lseek_r>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	4632      	mov	r2, r6
 8005b82:	463b      	mov	r3, r7
 8005b84:	4628      	mov	r0, r5
 8005b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	f000 b86f 	b.w	8005c6c <_write_r>

08005b8e <__sseek>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b96:	f000 f845 	bl	8005c24 <_lseek_r>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	bf15      	itete	ne
 8005ba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005baa:	81a3      	strheq	r3, [r4, #12]
 8005bac:	bf18      	it	ne
 8005bae:	81a3      	strhne	r3, [r4, #12]
 8005bb0:	bd10      	pop	{r4, pc}

08005bb2 <__sclose>:
 8005bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb6:	f000 b825 	b.w	8005c04 <_close_r>

08005bba <memset>:
 8005bba:	4402      	add	r2, r0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d100      	bne.n	8005bc4 <memset+0xa>
 8005bc2:	4770      	bx	lr
 8005bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc8:	e7f9      	b.n	8005bbe <memset+0x4>

08005bca <strcat>:
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4602      	mov	r2, r0
 8005bce:	7814      	ldrb	r4, [r2, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	3201      	adds	r2, #1
 8005bd4:	2c00      	cmp	r4, #0
 8005bd6:	d1fa      	bne.n	8005bce <strcat+0x4>
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d1f9      	bne.n	8005bda <strcat+0x10>
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <strchr>:
 8005be8:	b2c9      	uxtb	r1, r1
 8005bea:	4603      	mov	r3, r0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf2:	b112      	cbz	r2, 8005bfa <strchr+0x12>
 8005bf4:	428a      	cmp	r2, r1
 8005bf6:	d1f9      	bne.n	8005bec <strchr+0x4>
 8005bf8:	4770      	bx	lr
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	bf18      	it	ne
 8005bfe:	2000      	movne	r0, #0
 8005c00:	4770      	bx	lr
	...

08005c04 <_close_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d06      	ldr	r5, [pc, #24]	@ (8005c20 <_close_r+0x1c>)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	f7fb faf9 	bl	8001206 <_close>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_close_r+0x1a>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_close_r+0x1a>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	200002a0 	.word	0x200002a0

08005c24 <_lseek_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d07      	ldr	r5, [pc, #28]	@ (8005c44 <_lseek_r+0x20>)
 8005c28:	4604      	mov	r4, r0
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	2200      	movs	r2, #0
 8005c30:	602a      	str	r2, [r5, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f7fb fb0e 	bl	8001254 <_lseek>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_lseek_r+0x1e>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_lseek_r+0x1e>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	200002a0 	.word	0x200002a0

08005c48 <_read_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	@ (8005c68 <_read_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fb fa9c 	bl	8001194 <_read>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_read_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_read_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	200002a0 	.word	0x200002a0

08005c6c <_write_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	@ (8005c8c <_write_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fb faa7 	bl	80011ce <_write>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_write_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_write_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	200002a0 	.word	0x200002a0

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	@ (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000018 	.word	0x20000018

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	@ (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	@ (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 ff6e 	bl	8006b90 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08007014 	.word	0x08007014
 8005cd8:	08007014 	.word	0x08007014
 8005cdc:	08007014 	.word	0x08007014
 8005ce0:	08007018 	.word	0x08007018

08005ce4 <__retarget_lock_init_recursive>:
 8005ce4:	4770      	bx	lr

08005ce6 <__retarget_lock_acquire_recursive>:
 8005ce6:	4770      	bx	lr

08005ce8 <__retarget_lock_release_recursive>:
 8005ce8:	4770      	bx	lr
	...

08005cec <_free_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d041      	beq.n	8005d78 <_free_r+0x8c>
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f0c      	subs	r4, r1, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	18e4      	addlt	r4, r4, r3
 8005d00:	f000 f8e0 	bl	8005ec4 <__malloc_lock>
 8005d04:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <_free_r+0x90>)
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	b933      	cbnz	r3, 8005d18 <_free_r+0x2c>
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	6014      	str	r4, [r2, #0]
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d14:	f000 b8dc 	b.w	8005ed0 <__malloc_unlock>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d908      	bls.n	8005d2e <_free_r+0x42>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf01      	itttt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	1809      	addeq	r1, r1, r0
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	e7ed      	b.n	8005d0a <_free_r+0x1e>
 8005d2e:	461a      	mov	r2, r3
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b10b      	cbz	r3, 8005d38 <_free_r+0x4c>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d9fa      	bls.n	8005d2e <_free_r+0x42>
 8005d38:	6811      	ldr	r1, [r2, #0]
 8005d3a:	1850      	adds	r0, r2, r1
 8005d3c:	42a0      	cmp	r0, r4
 8005d3e:	d10b      	bne.n	8005d58 <_free_r+0x6c>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	4401      	add	r1, r0
 8005d44:	1850      	adds	r0, r2, r1
 8005d46:	4283      	cmp	r3, r0
 8005d48:	6011      	str	r1, [r2, #0]
 8005d4a:	d1e0      	bne.n	8005d0e <_free_r+0x22>
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6053      	str	r3, [r2, #4]
 8005d52:	4408      	add	r0, r1
 8005d54:	6010      	str	r0, [r2, #0]
 8005d56:	e7da      	b.n	8005d0e <_free_r+0x22>
 8005d58:	d902      	bls.n	8005d60 <_free_r+0x74>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	e7d6      	b.n	8005d0e <_free_r+0x22>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	1821      	adds	r1, r4, r0
 8005d64:	428b      	cmp	r3, r1
 8005d66:	bf04      	itt	eq
 8005d68:	6819      	ldreq	r1, [r3, #0]
 8005d6a:	685b      	ldreq	r3, [r3, #4]
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	bf04      	itt	eq
 8005d70:	1809      	addeq	r1, r1, r0
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	6054      	str	r4, [r2, #4]
 8005d76:	e7ca      	b.n	8005d0e <_free_r+0x22>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200002ac 	.word	0x200002ac

08005d80 <sbrk_aligned>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4e0f      	ldr	r6, [pc, #60]	@ (8005dc0 <sbrk_aligned+0x40>)
 8005d84:	460c      	mov	r4, r1
 8005d86:	6831      	ldr	r1, [r6, #0]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	b911      	cbnz	r1, 8005d92 <sbrk_aligned+0x12>
 8005d8c:	f000 fe28 	bl	80069e0 <_sbrk_r>
 8005d90:	6030      	str	r0, [r6, #0]
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 fe23 	bl	80069e0 <_sbrk_r>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	d103      	bne.n	8005da6 <sbrk_aligned+0x26>
 8005d9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005da2:	4620      	mov	r0, r4
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
 8005da6:	1cc4      	adds	r4, r0, #3
 8005da8:	f024 0403 	bic.w	r4, r4, #3
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d0f8      	beq.n	8005da2 <sbrk_aligned+0x22>
 8005db0:	1a21      	subs	r1, r4, r0
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 fe14 	bl	80069e0 <_sbrk_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d1f2      	bne.n	8005da2 <sbrk_aligned+0x22>
 8005dbc:	e7ef      	b.n	8005d9e <sbrk_aligned+0x1e>
 8005dbe:	bf00      	nop
 8005dc0:	200002a8 	.word	0x200002a8

08005dc4 <_malloc_r>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	1ccd      	adds	r5, r1, #3
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	4606      	mov	r6, r0
 8005dda:	db01      	blt.n	8005de0 <_malloc_r+0x1c>
 8005ddc:	42a9      	cmp	r1, r5
 8005dde:	d904      	bls.n	8005dea <_malloc_r+0x26>
 8005de0:	230c      	movs	r3, #12
 8005de2:	6033      	str	r3, [r6, #0]
 8005de4:	2000      	movs	r0, #0
 8005de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ec0 <_malloc_r+0xfc>
 8005dee:	f000 f869 	bl	8005ec4 <__malloc_lock>
 8005df2:	f8d8 3000 	ldr.w	r3, [r8]
 8005df6:	461c      	mov	r4, r3
 8005df8:	bb44      	cbnz	r4, 8005e4c <_malloc_r+0x88>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7ff ffbf 	bl	8005d80 <sbrk_aligned>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	4604      	mov	r4, r0
 8005e06:	d158      	bne.n	8005eba <_malloc_r+0xf6>
 8005e08:	f8d8 4000 	ldr.w	r4, [r8]
 8005e0c:	4627      	mov	r7, r4
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	d143      	bne.n	8005e9a <_malloc_r+0xd6>
 8005e12:	2c00      	cmp	r4, #0
 8005e14:	d04b      	beq.n	8005eae <_malloc_r+0xea>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	4639      	mov	r1, r7
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	eb04 0903 	add.w	r9, r4, r3
 8005e20:	f000 fdde 	bl	80069e0 <_sbrk_r>
 8005e24:	4581      	cmp	r9, r0
 8005e26:	d142      	bne.n	8005eae <_malloc_r+0xea>
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	1a6d      	subs	r5, r5, r1
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ffa6 	bl	8005d80 <sbrk_aligned>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d03a      	beq.n	8005eae <_malloc_r+0xea>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	442b      	add	r3, r5
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	bb62      	cbnz	r2, 8005ea0 <_malloc_r+0xdc>
 8005e46:	f8c8 7000 	str.w	r7, [r8]
 8005e4a:	e00f      	b.n	8005e6c <_malloc_r+0xa8>
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	1b52      	subs	r2, r2, r5
 8005e50:	d420      	bmi.n	8005e94 <_malloc_r+0xd0>
 8005e52:	2a0b      	cmp	r2, #11
 8005e54:	d917      	bls.n	8005e86 <_malloc_r+0xc2>
 8005e56:	1961      	adds	r1, r4, r5
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	6025      	str	r5, [r4, #0]
 8005e5c:	bf18      	it	ne
 8005e5e:	6059      	strne	r1, [r3, #4]
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	bf08      	it	eq
 8005e64:	f8c8 1000 	streq.w	r1, [r8]
 8005e68:	5162      	str	r2, [r4, r5]
 8005e6a:	604b      	str	r3, [r1, #4]
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f000 f82f 	bl	8005ed0 <__malloc_unlock>
 8005e72:	f104 000b 	add.w	r0, r4, #11
 8005e76:	1d23      	adds	r3, r4, #4
 8005e78:	f020 0007 	bic.w	r0, r0, #7
 8005e7c:	1ac2      	subs	r2, r0, r3
 8005e7e:	bf1c      	itt	ne
 8005e80:	1a1b      	subne	r3, r3, r0
 8005e82:	50a3      	strne	r3, [r4, r2]
 8005e84:	e7af      	b.n	8005de6 <_malloc_r+0x22>
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	bf0c      	ite	eq
 8005e8c:	f8c8 2000 	streq.w	r2, [r8]
 8005e90:	605a      	strne	r2, [r3, #4]
 8005e92:	e7eb      	b.n	8005e6c <_malloc_r+0xa8>
 8005e94:	4623      	mov	r3, r4
 8005e96:	6864      	ldr	r4, [r4, #4]
 8005e98:	e7ae      	b.n	8005df8 <_malloc_r+0x34>
 8005e9a:	463c      	mov	r4, r7
 8005e9c:	687f      	ldr	r7, [r7, #4]
 8005e9e:	e7b6      	b.n	8005e0e <_malloc_r+0x4a>
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	d1fb      	bne.n	8005ea0 <_malloc_r+0xdc>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6053      	str	r3, [r2, #4]
 8005eac:	e7de      	b.n	8005e6c <_malloc_r+0xa8>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	6033      	str	r3, [r6, #0]
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f000 f80c 	bl	8005ed0 <__malloc_unlock>
 8005eb8:	e794      	b.n	8005de4 <_malloc_r+0x20>
 8005eba:	6005      	str	r5, [r0, #0]
 8005ebc:	e7d6      	b.n	8005e6c <_malloc_r+0xa8>
 8005ebe:	bf00      	nop
 8005ec0:	200002ac 	.word	0x200002ac

08005ec4 <__malloc_lock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	@ (8005ecc <__malloc_lock+0x8>)
 8005ec6:	f7ff bf0e 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8005eca:	bf00      	nop
 8005ecc:	200002a4 	.word	0x200002a4

08005ed0 <__malloc_unlock>:
 8005ed0:	4801      	ldr	r0, [pc, #4]	@ (8005ed8 <__malloc_unlock+0x8>)
 8005ed2:	f7ff bf09 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8005ed6:	bf00      	nop
 8005ed8:	200002a4 	.word	0x200002a4

08005edc <__ssputs_r>:
 8005edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	688e      	ldr	r6, [r1, #8]
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	42be      	cmp	r6, r7
 8005ee6:	680b      	ldr	r3, [r1, #0]
 8005ee8:	4682      	mov	sl, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	4690      	mov	r8, r2
 8005eee:	d82d      	bhi.n	8005f4c <__ssputs_r+0x70>
 8005ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ef8:	d026      	beq.n	8005f48 <__ssputs_r+0x6c>
 8005efa:	6965      	ldr	r5, [r4, #20]
 8005efc:	6909      	ldr	r1, [r1, #16]
 8005efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f02:	eba3 0901 	sub.w	r9, r3, r1
 8005f06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f0a:	1c7b      	adds	r3, r7, #1
 8005f0c:	444b      	add	r3, r9
 8005f0e:	106d      	asrs	r5, r5, #1
 8005f10:	429d      	cmp	r5, r3
 8005f12:	bf38      	it	cc
 8005f14:	461d      	movcc	r5, r3
 8005f16:	0553      	lsls	r3, r2, #21
 8005f18:	d527      	bpl.n	8005f6a <__ssputs_r+0x8e>
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f7ff ff52 	bl	8005dc4 <_malloc_r>
 8005f20:	4606      	mov	r6, r0
 8005f22:	b360      	cbz	r0, 8005f7e <__ssputs_r+0xa2>
 8005f24:	6921      	ldr	r1, [r4, #16]
 8005f26:	464a      	mov	r2, r9
 8005f28:	f000 fd6a 	bl	8006a00 <memcpy>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	6126      	str	r6, [r4, #16]
 8005f3a:	6165      	str	r5, [r4, #20]
 8005f3c:	444e      	add	r6, r9
 8005f3e:	eba5 0509 	sub.w	r5, r5, r9
 8005f42:	6026      	str	r6, [r4, #0]
 8005f44:	60a5      	str	r5, [r4, #8]
 8005f46:	463e      	mov	r6, r7
 8005f48:	42be      	cmp	r6, r7
 8005f4a:	d900      	bls.n	8005f4e <__ssputs_r+0x72>
 8005f4c:	463e      	mov	r6, r7
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	4632      	mov	r2, r6
 8005f52:	4641      	mov	r1, r8
 8005f54:	f000 fd2a 	bl	80069ac <memmove>
 8005f58:	68a3      	ldr	r3, [r4, #8]
 8005f5a:	1b9b      	subs	r3, r3, r6
 8005f5c:	60a3      	str	r3, [r4, #8]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	4433      	add	r3, r6
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	2000      	movs	r0, #0
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	f000 fd56 	bl	8006a1c <_realloc_r>
 8005f70:	4606      	mov	r6, r0
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d1e0      	bne.n	8005f38 <__ssputs_r+0x5c>
 8005f76:	6921      	ldr	r1, [r4, #16]
 8005f78:	4650      	mov	r0, sl
 8005f7a:	f7ff feb7 	bl	8005cec <_free_r>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	f8ca 3000 	str.w	r3, [sl]
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8a:	81a3      	strh	r3, [r4, #12]
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	e7e9      	b.n	8005f66 <__ssputs_r+0x8a>
	...

08005f94 <_svfiprintf_r>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4698      	mov	r8, r3
 8005f9a:	898b      	ldrh	r3, [r1, #12]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	b09d      	sub	sp, #116	@ 0x74
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	d510      	bpl.n	8005fca <_svfiprintf_r+0x36>
 8005fa8:	690b      	ldr	r3, [r1, #16]
 8005faa:	b973      	cbnz	r3, 8005fca <_svfiprintf_r+0x36>
 8005fac:	2140      	movs	r1, #64	@ 0x40
 8005fae:	f7ff ff09 	bl	8005dc4 <_malloc_r>
 8005fb2:	6028      	str	r0, [r5, #0]
 8005fb4:	6128      	str	r0, [r5, #16]
 8005fb6:	b930      	cbnz	r0, 8005fc6 <_svfiprintf_r+0x32>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	b01d      	add	sp, #116	@ 0x74
 8005fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc6:	2340      	movs	r3, #64	@ 0x40
 8005fc8:	616b      	str	r3, [r5, #20]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fce:	2320      	movs	r3, #32
 8005fd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd8:	2330      	movs	r3, #48	@ 0x30
 8005fda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006178 <_svfiprintf_r+0x1e4>
 8005fde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fe2:	f04f 0901 	mov.w	r9, #1
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	469a      	mov	sl, r3
 8005fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fee:	b10a      	cbz	r2, 8005ff4 <_svfiprintf_r+0x60>
 8005ff0:	2a25      	cmp	r2, #37	@ 0x25
 8005ff2:	d1f9      	bne.n	8005fe8 <_svfiprintf_r+0x54>
 8005ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff8:	d00b      	beq.n	8006012 <_svfiprintf_r+0x7e>
 8005ffa:	465b      	mov	r3, fp
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ff6b 	bl	8005edc <__ssputs_r>
 8006006:	3001      	adds	r0, #1
 8006008:	f000 80a7 	beq.w	800615a <_svfiprintf_r+0x1c6>
 800600c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800600e:	445a      	add	r2, fp
 8006010:	9209      	str	r2, [sp, #36]	@ 0x24
 8006012:	f89a 3000 	ldrb.w	r3, [sl]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 809f 	beq.w	800615a <_svfiprintf_r+0x1c6>
 800601c:	2300      	movs	r3, #0
 800601e:	f04f 32ff 	mov.w	r2, #4294967295
 8006022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006026:	f10a 0a01 	add.w	sl, sl, #1
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006032:	931a      	str	r3, [sp, #104]	@ 0x68
 8006034:	4654      	mov	r4, sl
 8006036:	2205      	movs	r2, #5
 8006038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603c:	484e      	ldr	r0, [pc, #312]	@ (8006178 <_svfiprintf_r+0x1e4>)
 800603e:	f7fa f8cf 	bl	80001e0 <memchr>
 8006042:	9a04      	ldr	r2, [sp, #16]
 8006044:	b9d8      	cbnz	r0, 800607e <_svfiprintf_r+0xea>
 8006046:	06d0      	lsls	r0, r2, #27
 8006048:	bf44      	itt	mi
 800604a:	2320      	movmi	r3, #32
 800604c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006050:	0711      	lsls	r1, r2, #28
 8006052:	bf44      	itt	mi
 8006054:	232b      	movmi	r3, #43	@ 0x2b
 8006056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800605a:	f89a 3000 	ldrb.w	r3, [sl]
 800605e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006060:	d015      	beq.n	800608e <_svfiprintf_r+0xfa>
 8006062:	9a07      	ldr	r2, [sp, #28]
 8006064:	4654      	mov	r4, sl
 8006066:	2000      	movs	r0, #0
 8006068:	f04f 0c0a 	mov.w	ip, #10
 800606c:	4621      	mov	r1, r4
 800606e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006072:	3b30      	subs	r3, #48	@ 0x30
 8006074:	2b09      	cmp	r3, #9
 8006076:	d94b      	bls.n	8006110 <_svfiprintf_r+0x17c>
 8006078:	b1b0      	cbz	r0, 80060a8 <_svfiprintf_r+0x114>
 800607a:	9207      	str	r2, [sp, #28]
 800607c:	e014      	b.n	80060a8 <_svfiprintf_r+0x114>
 800607e:	eba0 0308 	sub.w	r3, r0, r8
 8006082:	fa09 f303 	lsl.w	r3, r9, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	46a2      	mov	sl, r4
 800608c:	e7d2      	b.n	8006034 <_svfiprintf_r+0xa0>
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	9103      	str	r1, [sp, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfbb      	ittet	lt
 800609a:	425b      	neglt	r3, r3
 800609c:	f042 0202 	orrlt.w	r2, r2, #2
 80060a0:	9307      	strge	r3, [sp, #28]
 80060a2:	9307      	strlt	r3, [sp, #28]
 80060a4:	bfb8      	it	lt
 80060a6:	9204      	strlt	r2, [sp, #16]
 80060a8:	7823      	ldrb	r3, [r4, #0]
 80060aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ac:	d10a      	bne.n	80060c4 <_svfiprintf_r+0x130>
 80060ae:	7863      	ldrb	r3, [r4, #1]
 80060b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060b2:	d132      	bne.n	800611a <_svfiprintf_r+0x186>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	1d1a      	adds	r2, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	9203      	str	r2, [sp, #12]
 80060bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060c0:	3402      	adds	r4, #2
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006188 <_svfiprintf_r+0x1f4>
 80060c8:	7821      	ldrb	r1, [r4, #0]
 80060ca:	2203      	movs	r2, #3
 80060cc:	4650      	mov	r0, sl
 80060ce:	f7fa f887 	bl	80001e0 <memchr>
 80060d2:	b138      	cbz	r0, 80060e4 <_svfiprintf_r+0x150>
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	eba0 000a 	sub.w	r0, r0, sl
 80060da:	2240      	movs	r2, #64	@ 0x40
 80060dc:	4082      	lsls	r2, r0
 80060de:	4313      	orrs	r3, r2
 80060e0:	3401      	adds	r4, #1
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e8:	4824      	ldr	r0, [pc, #144]	@ (800617c <_svfiprintf_r+0x1e8>)
 80060ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060ee:	2206      	movs	r2, #6
 80060f0:	f7fa f876 	bl	80001e0 <memchr>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d036      	beq.n	8006166 <_svfiprintf_r+0x1d2>
 80060f8:	4b21      	ldr	r3, [pc, #132]	@ (8006180 <_svfiprintf_r+0x1ec>)
 80060fa:	bb1b      	cbnz	r3, 8006144 <_svfiprintf_r+0x1b0>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	3307      	adds	r3, #7
 8006100:	f023 0307 	bic.w	r3, r3, #7
 8006104:	3308      	adds	r3, #8
 8006106:	9303      	str	r3, [sp, #12]
 8006108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800610a:	4433      	add	r3, r6
 800610c:	9309      	str	r3, [sp, #36]	@ 0x24
 800610e:	e76a      	b.n	8005fe6 <_svfiprintf_r+0x52>
 8006110:	fb0c 3202 	mla	r2, ip, r2, r3
 8006114:	460c      	mov	r4, r1
 8006116:	2001      	movs	r0, #1
 8006118:	e7a8      	b.n	800606c <_svfiprintf_r+0xd8>
 800611a:	2300      	movs	r3, #0
 800611c:	3401      	adds	r4, #1
 800611e:	9305      	str	r3, [sp, #20]
 8006120:	4619      	mov	r1, r3
 8006122:	f04f 0c0a 	mov.w	ip, #10
 8006126:	4620      	mov	r0, r4
 8006128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800612c:	3a30      	subs	r2, #48	@ 0x30
 800612e:	2a09      	cmp	r2, #9
 8006130:	d903      	bls.n	800613a <_svfiprintf_r+0x1a6>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0c6      	beq.n	80060c4 <_svfiprintf_r+0x130>
 8006136:	9105      	str	r1, [sp, #20]
 8006138:	e7c4      	b.n	80060c4 <_svfiprintf_r+0x130>
 800613a:	fb0c 2101 	mla	r1, ip, r1, r2
 800613e:	4604      	mov	r4, r0
 8006140:	2301      	movs	r3, #1
 8006142:	e7f0      	b.n	8006126 <_svfiprintf_r+0x192>
 8006144:	ab03      	add	r3, sp, #12
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	462a      	mov	r2, r5
 800614a:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <_svfiprintf_r+0x1f0>)
 800614c:	a904      	add	r1, sp, #16
 800614e:	4638      	mov	r0, r7
 8006150:	f3af 8000 	nop.w
 8006154:	1c42      	adds	r2, r0, #1
 8006156:	4606      	mov	r6, r0
 8006158:	d1d6      	bne.n	8006108 <_svfiprintf_r+0x174>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	065b      	lsls	r3, r3, #25
 800615e:	f53f af2d 	bmi.w	8005fbc <_svfiprintf_r+0x28>
 8006162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006164:	e72c      	b.n	8005fc0 <_svfiprintf_r+0x2c>
 8006166:	ab03      	add	r3, sp, #12
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	462a      	mov	r2, r5
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <_svfiprintf_r+0x1f0>)
 800616e:	a904      	add	r1, sp, #16
 8006170:	4638      	mov	r0, r7
 8006172:	f000 f9bb 	bl	80064ec <_printf_i>
 8006176:	e7ed      	b.n	8006154 <_svfiprintf_r+0x1c0>
 8006178:	08006fd9 	.word	0x08006fd9
 800617c:	08006fe3 	.word	0x08006fe3
 8006180:	00000000 	.word	0x00000000
 8006184:	08005edd 	.word	0x08005edd
 8006188:	08006fdf 	.word	0x08006fdf

0800618c <__sfputc_r>:
 800618c:	6893      	ldr	r3, [r2, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	b410      	push	{r4}
 8006194:	6093      	str	r3, [r2, #8]
 8006196:	da08      	bge.n	80061aa <__sfputc_r+0x1e>
 8006198:	6994      	ldr	r4, [r2, #24]
 800619a:	42a3      	cmp	r3, r4
 800619c:	db01      	blt.n	80061a2 <__sfputc_r+0x16>
 800619e:	290a      	cmp	r1, #10
 80061a0:	d103      	bne.n	80061aa <__sfputc_r+0x1e>
 80061a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061a6:	f000 bb6d 	b.w	8006884 <__swbuf_r>
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	1c58      	adds	r0, r3, #1
 80061ae:	6010      	str	r0, [r2, #0]
 80061b0:	7019      	strb	r1, [r3, #0]
 80061b2:	4608      	mov	r0, r1
 80061b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <__sfputs_r>:
 80061ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061bc:	4606      	mov	r6, r0
 80061be:	460f      	mov	r7, r1
 80061c0:	4614      	mov	r4, r2
 80061c2:	18d5      	adds	r5, r2, r3
 80061c4:	42ac      	cmp	r4, r5
 80061c6:	d101      	bne.n	80061cc <__sfputs_r+0x12>
 80061c8:	2000      	movs	r0, #0
 80061ca:	e007      	b.n	80061dc <__sfputs_r+0x22>
 80061cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d0:	463a      	mov	r2, r7
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7ff ffda 	bl	800618c <__sfputc_r>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d1f3      	bne.n	80061c4 <__sfputs_r+0xa>
 80061dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061e0 <_vfiprintf_r>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	460d      	mov	r5, r1
 80061e6:	b09d      	sub	sp, #116	@ 0x74
 80061e8:	4614      	mov	r4, r2
 80061ea:	4698      	mov	r8, r3
 80061ec:	4606      	mov	r6, r0
 80061ee:	b118      	cbz	r0, 80061f8 <_vfiprintf_r+0x18>
 80061f0:	6a03      	ldr	r3, [r0, #32]
 80061f2:	b90b      	cbnz	r3, 80061f8 <_vfiprintf_r+0x18>
 80061f4:	f7ff fc36 	bl	8005a64 <__sinit>
 80061f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061fa:	07d9      	lsls	r1, r3, #31
 80061fc:	d405      	bmi.n	800620a <_vfiprintf_r+0x2a>
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	059a      	lsls	r2, r3, #22
 8006202:	d402      	bmi.n	800620a <_vfiprintf_r+0x2a>
 8006204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006206:	f7ff fd6e 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	071b      	lsls	r3, r3, #28
 800620e:	d501      	bpl.n	8006214 <_vfiprintf_r+0x34>
 8006210:	692b      	ldr	r3, [r5, #16]
 8006212:	b99b      	cbnz	r3, 800623c <_vfiprintf_r+0x5c>
 8006214:	4629      	mov	r1, r5
 8006216:	4630      	mov	r0, r6
 8006218:	f000 fb72 	bl	8006900 <__swsetup_r>
 800621c:	b170      	cbz	r0, 800623c <_vfiprintf_r+0x5c>
 800621e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006220:	07dc      	lsls	r4, r3, #31
 8006222:	d504      	bpl.n	800622e <_vfiprintf_r+0x4e>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	b01d      	add	sp, #116	@ 0x74
 800622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	0598      	lsls	r0, r3, #22
 8006232:	d4f7      	bmi.n	8006224 <_vfiprintf_r+0x44>
 8006234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006236:	f7ff fd57 	bl	8005ce8 <__retarget_lock_release_recursive>
 800623a:	e7f3      	b.n	8006224 <_vfiprintf_r+0x44>
 800623c:	2300      	movs	r3, #0
 800623e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006240:	2320      	movs	r3, #32
 8006242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006246:	f8cd 800c 	str.w	r8, [sp, #12]
 800624a:	2330      	movs	r3, #48	@ 0x30
 800624c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063fc <_vfiprintf_r+0x21c>
 8006250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006254:	f04f 0901 	mov.w	r9, #1
 8006258:	4623      	mov	r3, r4
 800625a:	469a      	mov	sl, r3
 800625c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006260:	b10a      	cbz	r2, 8006266 <_vfiprintf_r+0x86>
 8006262:	2a25      	cmp	r2, #37	@ 0x25
 8006264:	d1f9      	bne.n	800625a <_vfiprintf_r+0x7a>
 8006266:	ebba 0b04 	subs.w	fp, sl, r4
 800626a:	d00b      	beq.n	8006284 <_vfiprintf_r+0xa4>
 800626c:	465b      	mov	r3, fp
 800626e:	4622      	mov	r2, r4
 8006270:	4629      	mov	r1, r5
 8006272:	4630      	mov	r0, r6
 8006274:	f7ff ffa1 	bl	80061ba <__sfputs_r>
 8006278:	3001      	adds	r0, #1
 800627a:	f000 80a7 	beq.w	80063cc <_vfiprintf_r+0x1ec>
 800627e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006280:	445a      	add	r2, fp
 8006282:	9209      	str	r2, [sp, #36]	@ 0x24
 8006284:	f89a 3000 	ldrb.w	r3, [sl]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 809f 	beq.w	80063cc <_vfiprintf_r+0x1ec>
 800628e:	2300      	movs	r3, #0
 8006290:	f04f 32ff 	mov.w	r2, #4294967295
 8006294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006298:	f10a 0a01 	add.w	sl, sl, #1
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80062a6:	4654      	mov	r4, sl
 80062a8:	2205      	movs	r2, #5
 80062aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ae:	4853      	ldr	r0, [pc, #332]	@ (80063fc <_vfiprintf_r+0x21c>)
 80062b0:	f7f9 ff96 	bl	80001e0 <memchr>
 80062b4:	9a04      	ldr	r2, [sp, #16]
 80062b6:	b9d8      	cbnz	r0, 80062f0 <_vfiprintf_r+0x110>
 80062b8:	06d1      	lsls	r1, r2, #27
 80062ba:	bf44      	itt	mi
 80062bc:	2320      	movmi	r3, #32
 80062be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062c2:	0713      	lsls	r3, r2, #28
 80062c4:	bf44      	itt	mi
 80062c6:	232b      	movmi	r3, #43	@ 0x2b
 80062c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062cc:	f89a 3000 	ldrb.w	r3, [sl]
 80062d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062d2:	d015      	beq.n	8006300 <_vfiprintf_r+0x120>
 80062d4:	9a07      	ldr	r2, [sp, #28]
 80062d6:	4654      	mov	r4, sl
 80062d8:	2000      	movs	r0, #0
 80062da:	f04f 0c0a 	mov.w	ip, #10
 80062de:	4621      	mov	r1, r4
 80062e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062e4:	3b30      	subs	r3, #48	@ 0x30
 80062e6:	2b09      	cmp	r3, #9
 80062e8:	d94b      	bls.n	8006382 <_vfiprintf_r+0x1a2>
 80062ea:	b1b0      	cbz	r0, 800631a <_vfiprintf_r+0x13a>
 80062ec:	9207      	str	r2, [sp, #28]
 80062ee:	e014      	b.n	800631a <_vfiprintf_r+0x13a>
 80062f0:	eba0 0308 	sub.w	r3, r0, r8
 80062f4:	fa09 f303 	lsl.w	r3, r9, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	46a2      	mov	sl, r4
 80062fe:	e7d2      	b.n	80062a6 <_vfiprintf_r+0xc6>
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	1d19      	adds	r1, r3, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	9103      	str	r1, [sp, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfbb      	ittet	lt
 800630c:	425b      	neglt	r3, r3
 800630e:	f042 0202 	orrlt.w	r2, r2, #2
 8006312:	9307      	strge	r3, [sp, #28]
 8006314:	9307      	strlt	r3, [sp, #28]
 8006316:	bfb8      	it	lt
 8006318:	9204      	strlt	r2, [sp, #16]
 800631a:	7823      	ldrb	r3, [r4, #0]
 800631c:	2b2e      	cmp	r3, #46	@ 0x2e
 800631e:	d10a      	bne.n	8006336 <_vfiprintf_r+0x156>
 8006320:	7863      	ldrb	r3, [r4, #1]
 8006322:	2b2a      	cmp	r3, #42	@ 0x2a
 8006324:	d132      	bne.n	800638c <_vfiprintf_r+0x1ac>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	1d1a      	adds	r2, r3, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	9203      	str	r2, [sp, #12]
 800632e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006332:	3402      	adds	r4, #2
 8006334:	9305      	str	r3, [sp, #20]
 8006336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800640c <_vfiprintf_r+0x22c>
 800633a:	7821      	ldrb	r1, [r4, #0]
 800633c:	2203      	movs	r2, #3
 800633e:	4650      	mov	r0, sl
 8006340:	f7f9 ff4e 	bl	80001e0 <memchr>
 8006344:	b138      	cbz	r0, 8006356 <_vfiprintf_r+0x176>
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	eba0 000a 	sub.w	r0, r0, sl
 800634c:	2240      	movs	r2, #64	@ 0x40
 800634e:	4082      	lsls	r2, r0
 8006350:	4313      	orrs	r3, r2
 8006352:	3401      	adds	r4, #1
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635a:	4829      	ldr	r0, [pc, #164]	@ (8006400 <_vfiprintf_r+0x220>)
 800635c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006360:	2206      	movs	r2, #6
 8006362:	f7f9 ff3d 	bl	80001e0 <memchr>
 8006366:	2800      	cmp	r0, #0
 8006368:	d03f      	beq.n	80063ea <_vfiprintf_r+0x20a>
 800636a:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <_vfiprintf_r+0x224>)
 800636c:	bb1b      	cbnz	r3, 80063b6 <_vfiprintf_r+0x1d6>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	3307      	adds	r3, #7
 8006372:	f023 0307 	bic.w	r3, r3, #7
 8006376:	3308      	adds	r3, #8
 8006378:	9303      	str	r3, [sp, #12]
 800637a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637c:	443b      	add	r3, r7
 800637e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006380:	e76a      	b.n	8006258 <_vfiprintf_r+0x78>
 8006382:	fb0c 3202 	mla	r2, ip, r2, r3
 8006386:	460c      	mov	r4, r1
 8006388:	2001      	movs	r0, #1
 800638a:	e7a8      	b.n	80062de <_vfiprintf_r+0xfe>
 800638c:	2300      	movs	r3, #0
 800638e:	3401      	adds	r4, #1
 8006390:	9305      	str	r3, [sp, #20]
 8006392:	4619      	mov	r1, r3
 8006394:	f04f 0c0a 	mov.w	ip, #10
 8006398:	4620      	mov	r0, r4
 800639a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800639e:	3a30      	subs	r2, #48	@ 0x30
 80063a0:	2a09      	cmp	r2, #9
 80063a2:	d903      	bls.n	80063ac <_vfiprintf_r+0x1cc>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0c6      	beq.n	8006336 <_vfiprintf_r+0x156>
 80063a8:	9105      	str	r1, [sp, #20]
 80063aa:	e7c4      	b.n	8006336 <_vfiprintf_r+0x156>
 80063ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80063b0:	4604      	mov	r4, r0
 80063b2:	2301      	movs	r3, #1
 80063b4:	e7f0      	b.n	8006398 <_vfiprintf_r+0x1b8>
 80063b6:	ab03      	add	r3, sp, #12
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	462a      	mov	r2, r5
 80063bc:	4b12      	ldr	r3, [pc, #72]	@ (8006408 <_vfiprintf_r+0x228>)
 80063be:	a904      	add	r1, sp, #16
 80063c0:	4630      	mov	r0, r6
 80063c2:	f3af 8000 	nop.w
 80063c6:	4607      	mov	r7, r0
 80063c8:	1c78      	adds	r0, r7, #1
 80063ca:	d1d6      	bne.n	800637a <_vfiprintf_r+0x19a>
 80063cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063ce:	07d9      	lsls	r1, r3, #31
 80063d0:	d405      	bmi.n	80063de <_vfiprintf_r+0x1fe>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	059a      	lsls	r2, r3, #22
 80063d6:	d402      	bmi.n	80063de <_vfiprintf_r+0x1fe>
 80063d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063da:	f7ff fc85 	bl	8005ce8 <__retarget_lock_release_recursive>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	065b      	lsls	r3, r3, #25
 80063e2:	f53f af1f 	bmi.w	8006224 <_vfiprintf_r+0x44>
 80063e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063e8:	e71e      	b.n	8006228 <_vfiprintf_r+0x48>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <_vfiprintf_r+0x228>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4630      	mov	r0, r6
 80063f6:	f000 f879 	bl	80064ec <_printf_i>
 80063fa:	e7e4      	b.n	80063c6 <_vfiprintf_r+0x1e6>
 80063fc:	08006fd9 	.word	0x08006fd9
 8006400:	08006fe3 	.word	0x08006fe3
 8006404:	00000000 	.word	0x00000000
 8006408:	080061bb 	.word	0x080061bb
 800640c:	08006fdf 	.word	0x08006fdf

08006410 <_printf_common>:
 8006410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006414:	4616      	mov	r6, r2
 8006416:	4698      	mov	r8, r3
 8006418:	688a      	ldr	r2, [r1, #8]
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006420:	4293      	cmp	r3, r2
 8006422:	bfb8      	it	lt
 8006424:	4613      	movlt	r3, r2
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800642c:	4607      	mov	r7, r0
 800642e:	460c      	mov	r4, r1
 8006430:	b10a      	cbz	r2, 8006436 <_printf_common+0x26>
 8006432:	3301      	adds	r3, #1
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	0699      	lsls	r1, r3, #26
 800643a:	bf42      	ittt	mi
 800643c:	6833      	ldrmi	r3, [r6, #0]
 800643e:	3302      	addmi	r3, #2
 8006440:	6033      	strmi	r3, [r6, #0]
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	f015 0506 	ands.w	r5, r5, #6
 8006448:	d106      	bne.n	8006458 <_printf_common+0x48>
 800644a:	f104 0a19 	add.w	sl, r4, #25
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	6832      	ldr	r2, [r6, #0]
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	42ab      	cmp	r3, r5
 8006456:	dc26      	bgt.n	80064a6 <_printf_common+0x96>
 8006458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	3b00      	subs	r3, #0
 8006460:	bf18      	it	ne
 8006462:	2301      	movne	r3, #1
 8006464:	0692      	lsls	r2, r2, #26
 8006466:	d42b      	bmi.n	80064c0 <_printf_common+0xb0>
 8006468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800646c:	4641      	mov	r1, r8
 800646e:	4638      	mov	r0, r7
 8006470:	47c8      	blx	r9
 8006472:	3001      	adds	r0, #1
 8006474:	d01e      	beq.n	80064b4 <_printf_common+0xa4>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	6922      	ldr	r2, [r4, #16]
 800647a:	f003 0306 	and.w	r3, r3, #6
 800647e:	2b04      	cmp	r3, #4
 8006480:	bf02      	ittt	eq
 8006482:	68e5      	ldreq	r5, [r4, #12]
 8006484:	6833      	ldreq	r3, [r6, #0]
 8006486:	1aed      	subeq	r5, r5, r3
 8006488:	68a3      	ldr	r3, [r4, #8]
 800648a:	bf0c      	ite	eq
 800648c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006490:	2500      	movne	r5, #0
 8006492:	4293      	cmp	r3, r2
 8006494:	bfc4      	itt	gt
 8006496:	1a9b      	subgt	r3, r3, r2
 8006498:	18ed      	addgt	r5, r5, r3
 800649a:	2600      	movs	r6, #0
 800649c:	341a      	adds	r4, #26
 800649e:	42b5      	cmp	r5, r6
 80064a0:	d11a      	bne.n	80064d8 <_printf_common+0xc8>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e008      	b.n	80064b8 <_printf_common+0xa8>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4641      	mov	r1, r8
 80064ac:	4638      	mov	r0, r7
 80064ae:	47c8      	blx	r9
 80064b0:	3001      	adds	r0, #1
 80064b2:	d103      	bne.n	80064bc <_printf_common+0xac>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	3501      	adds	r5, #1
 80064be:	e7c6      	b.n	800644e <_printf_common+0x3e>
 80064c0:	18e1      	adds	r1, r4, r3
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	2030      	movs	r0, #48	@ 0x30
 80064c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064ca:	4422      	add	r2, r4
 80064cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064d4:	3302      	adds	r3, #2
 80064d6:	e7c7      	b.n	8006468 <_printf_common+0x58>
 80064d8:	2301      	movs	r3, #1
 80064da:	4622      	mov	r2, r4
 80064dc:	4641      	mov	r1, r8
 80064de:	4638      	mov	r0, r7
 80064e0:	47c8      	blx	r9
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0e6      	beq.n	80064b4 <_printf_common+0xa4>
 80064e6:	3601      	adds	r6, #1
 80064e8:	e7d9      	b.n	800649e <_printf_common+0x8e>
	...

080064ec <_printf_i>:
 80064ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	7e0f      	ldrb	r7, [r1, #24]
 80064f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064f4:	2f78      	cmp	r7, #120	@ 0x78
 80064f6:	4691      	mov	r9, r2
 80064f8:	4680      	mov	r8, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	469a      	mov	sl, r3
 80064fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006502:	d807      	bhi.n	8006514 <_printf_i+0x28>
 8006504:	2f62      	cmp	r7, #98	@ 0x62
 8006506:	d80a      	bhi.n	800651e <_printf_i+0x32>
 8006508:	2f00      	cmp	r7, #0
 800650a:	f000 80d2 	beq.w	80066b2 <_printf_i+0x1c6>
 800650e:	2f58      	cmp	r7, #88	@ 0x58
 8006510:	f000 80b9 	beq.w	8006686 <_printf_i+0x19a>
 8006514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800651c:	e03a      	b.n	8006594 <_printf_i+0xa8>
 800651e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006522:	2b15      	cmp	r3, #21
 8006524:	d8f6      	bhi.n	8006514 <_printf_i+0x28>
 8006526:	a101      	add	r1, pc, #4	@ (adr r1, 800652c <_printf_i+0x40>)
 8006528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800652c:	08006585 	.word	0x08006585
 8006530:	08006599 	.word	0x08006599
 8006534:	08006515 	.word	0x08006515
 8006538:	08006515 	.word	0x08006515
 800653c:	08006515 	.word	0x08006515
 8006540:	08006515 	.word	0x08006515
 8006544:	08006599 	.word	0x08006599
 8006548:	08006515 	.word	0x08006515
 800654c:	08006515 	.word	0x08006515
 8006550:	08006515 	.word	0x08006515
 8006554:	08006515 	.word	0x08006515
 8006558:	08006699 	.word	0x08006699
 800655c:	080065c3 	.word	0x080065c3
 8006560:	08006653 	.word	0x08006653
 8006564:	08006515 	.word	0x08006515
 8006568:	08006515 	.word	0x08006515
 800656c:	080066bb 	.word	0x080066bb
 8006570:	08006515 	.word	0x08006515
 8006574:	080065c3 	.word	0x080065c3
 8006578:	08006515 	.word	0x08006515
 800657c:	08006515 	.word	0x08006515
 8006580:	0800665b 	.word	0x0800665b
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	1d1a      	adds	r2, r3, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6032      	str	r2, [r6, #0]
 800658c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006594:	2301      	movs	r3, #1
 8006596:	e09d      	b.n	80066d4 <_printf_i+0x1e8>
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	0606      	lsls	r6, r0, #24
 80065a2:	d501      	bpl.n	80065a8 <_printf_i+0xbc>
 80065a4:	681d      	ldr	r5, [r3, #0]
 80065a6:	e003      	b.n	80065b0 <_printf_i+0xc4>
 80065a8:	0645      	lsls	r5, r0, #25
 80065aa:	d5fb      	bpl.n	80065a4 <_printf_i+0xb8>
 80065ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	da03      	bge.n	80065bc <_printf_i+0xd0>
 80065b4:	232d      	movs	r3, #45	@ 0x2d
 80065b6:	426d      	negs	r5, r5
 80065b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065bc:	4859      	ldr	r0, [pc, #356]	@ (8006724 <_printf_i+0x238>)
 80065be:	230a      	movs	r3, #10
 80065c0:	e011      	b.n	80065e6 <_printf_i+0xfa>
 80065c2:	6821      	ldr	r1, [r4, #0]
 80065c4:	6833      	ldr	r3, [r6, #0]
 80065c6:	0608      	lsls	r0, r1, #24
 80065c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80065cc:	d402      	bmi.n	80065d4 <_printf_i+0xe8>
 80065ce:	0649      	lsls	r1, r1, #25
 80065d0:	bf48      	it	mi
 80065d2:	b2ad      	uxthmi	r5, r5
 80065d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80065d6:	4853      	ldr	r0, [pc, #332]	@ (8006724 <_printf_i+0x238>)
 80065d8:	6033      	str	r3, [r6, #0]
 80065da:	bf14      	ite	ne
 80065dc:	230a      	movne	r3, #10
 80065de:	2308      	moveq	r3, #8
 80065e0:	2100      	movs	r1, #0
 80065e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065e6:	6866      	ldr	r6, [r4, #4]
 80065e8:	60a6      	str	r6, [r4, #8]
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	bfa2      	ittt	ge
 80065ee:	6821      	ldrge	r1, [r4, #0]
 80065f0:	f021 0104 	bicge.w	r1, r1, #4
 80065f4:	6021      	strge	r1, [r4, #0]
 80065f6:	b90d      	cbnz	r5, 80065fc <_printf_i+0x110>
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	d04b      	beq.n	8006694 <_printf_i+0x1a8>
 80065fc:	4616      	mov	r6, r2
 80065fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006602:	fb03 5711 	mls	r7, r3, r1, r5
 8006606:	5dc7      	ldrb	r7, [r0, r7]
 8006608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800660c:	462f      	mov	r7, r5
 800660e:	42bb      	cmp	r3, r7
 8006610:	460d      	mov	r5, r1
 8006612:	d9f4      	bls.n	80065fe <_printf_i+0x112>
 8006614:	2b08      	cmp	r3, #8
 8006616:	d10b      	bne.n	8006630 <_printf_i+0x144>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07df      	lsls	r7, r3, #31
 800661c:	d508      	bpl.n	8006630 <_printf_i+0x144>
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	6861      	ldr	r1, [r4, #4]
 8006622:	4299      	cmp	r1, r3
 8006624:	bfde      	ittt	le
 8006626:	2330      	movle	r3, #48	@ 0x30
 8006628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800662c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006630:	1b92      	subs	r2, r2, r6
 8006632:	6122      	str	r2, [r4, #16]
 8006634:	f8cd a000 	str.w	sl, [sp]
 8006638:	464b      	mov	r3, r9
 800663a:	aa03      	add	r2, sp, #12
 800663c:	4621      	mov	r1, r4
 800663e:	4640      	mov	r0, r8
 8006640:	f7ff fee6 	bl	8006410 <_printf_common>
 8006644:	3001      	adds	r0, #1
 8006646:	d14a      	bne.n	80066de <_printf_i+0x1f2>
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	b004      	add	sp, #16
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f043 0320 	orr.w	r3, r3, #32
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	4833      	ldr	r0, [pc, #204]	@ (8006728 <_printf_i+0x23c>)
 800665c:	2778      	movs	r7, #120	@ 0x78
 800665e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	6831      	ldr	r1, [r6, #0]
 8006666:	061f      	lsls	r7, r3, #24
 8006668:	f851 5b04 	ldr.w	r5, [r1], #4
 800666c:	d402      	bmi.n	8006674 <_printf_i+0x188>
 800666e:	065f      	lsls	r7, r3, #25
 8006670:	bf48      	it	mi
 8006672:	b2ad      	uxthmi	r5, r5
 8006674:	6031      	str	r1, [r6, #0]
 8006676:	07d9      	lsls	r1, r3, #31
 8006678:	bf44      	itt	mi
 800667a:	f043 0320 	orrmi.w	r3, r3, #32
 800667e:	6023      	strmi	r3, [r4, #0]
 8006680:	b11d      	cbz	r5, 800668a <_printf_i+0x19e>
 8006682:	2310      	movs	r3, #16
 8006684:	e7ac      	b.n	80065e0 <_printf_i+0xf4>
 8006686:	4827      	ldr	r0, [pc, #156]	@ (8006724 <_printf_i+0x238>)
 8006688:	e7e9      	b.n	800665e <_printf_i+0x172>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	f023 0320 	bic.w	r3, r3, #32
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	e7f6      	b.n	8006682 <_printf_i+0x196>
 8006694:	4616      	mov	r6, r2
 8006696:	e7bd      	b.n	8006614 <_printf_i+0x128>
 8006698:	6833      	ldr	r3, [r6, #0]
 800669a:	6825      	ldr	r5, [r4, #0]
 800669c:	6961      	ldr	r1, [r4, #20]
 800669e:	1d18      	adds	r0, r3, #4
 80066a0:	6030      	str	r0, [r6, #0]
 80066a2:	062e      	lsls	r6, r5, #24
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	d501      	bpl.n	80066ac <_printf_i+0x1c0>
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <_printf_i+0x1c6>
 80066ac:	0668      	lsls	r0, r5, #25
 80066ae:	d5fb      	bpl.n	80066a8 <_printf_i+0x1bc>
 80066b0:	8019      	strh	r1, [r3, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	4616      	mov	r6, r2
 80066b8:	e7bc      	b.n	8006634 <_printf_i+0x148>
 80066ba:	6833      	ldr	r3, [r6, #0]
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	6032      	str	r2, [r6, #0]
 80066c0:	681e      	ldr	r6, [r3, #0]
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	2100      	movs	r1, #0
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7f9 fd8a 	bl	80001e0 <memchr>
 80066cc:	b108      	cbz	r0, 80066d2 <_printf_i+0x1e6>
 80066ce:	1b80      	subs	r0, r0, r6
 80066d0:	6060      	str	r0, [r4, #4]
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	2300      	movs	r3, #0
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066dc:	e7aa      	b.n	8006634 <_printf_i+0x148>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	4632      	mov	r2, r6
 80066e2:	4649      	mov	r1, r9
 80066e4:	4640      	mov	r0, r8
 80066e6:	47d0      	blx	sl
 80066e8:	3001      	adds	r0, #1
 80066ea:	d0ad      	beq.n	8006648 <_printf_i+0x15c>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	079b      	lsls	r3, r3, #30
 80066f0:	d413      	bmi.n	800671a <_printf_i+0x22e>
 80066f2:	68e0      	ldr	r0, [r4, #12]
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	4298      	cmp	r0, r3
 80066f8:	bfb8      	it	lt
 80066fa:	4618      	movlt	r0, r3
 80066fc:	e7a6      	b.n	800664c <_printf_i+0x160>
 80066fe:	2301      	movs	r3, #1
 8006700:	4632      	mov	r2, r6
 8006702:	4649      	mov	r1, r9
 8006704:	4640      	mov	r0, r8
 8006706:	47d0      	blx	sl
 8006708:	3001      	adds	r0, #1
 800670a:	d09d      	beq.n	8006648 <_printf_i+0x15c>
 800670c:	3501      	adds	r5, #1
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	9903      	ldr	r1, [sp, #12]
 8006712:	1a5b      	subs	r3, r3, r1
 8006714:	42ab      	cmp	r3, r5
 8006716:	dcf2      	bgt.n	80066fe <_printf_i+0x212>
 8006718:	e7eb      	b.n	80066f2 <_printf_i+0x206>
 800671a:	2500      	movs	r5, #0
 800671c:	f104 0619 	add.w	r6, r4, #25
 8006720:	e7f5      	b.n	800670e <_printf_i+0x222>
 8006722:	bf00      	nop
 8006724:	08006fea 	.word	0x08006fea
 8006728:	08006ffb 	.word	0x08006ffb

0800672c <__sflush_r>:
 800672c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	0716      	lsls	r6, r2, #28
 8006736:	4605      	mov	r5, r0
 8006738:	460c      	mov	r4, r1
 800673a:	d454      	bmi.n	80067e6 <__sflush_r+0xba>
 800673c:	684b      	ldr	r3, [r1, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dc02      	bgt.n	8006748 <__sflush_r+0x1c>
 8006742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	dd48      	ble.n	80067da <__sflush_r+0xae>
 8006748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800674a:	2e00      	cmp	r6, #0
 800674c:	d045      	beq.n	80067da <__sflush_r+0xae>
 800674e:	2300      	movs	r3, #0
 8006750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006754:	682f      	ldr	r7, [r5, #0]
 8006756:	6a21      	ldr	r1, [r4, #32]
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	d030      	beq.n	80067be <__sflush_r+0x92>
 800675c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	0759      	lsls	r1, r3, #29
 8006762:	d505      	bpl.n	8006770 <__sflush_r+0x44>
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800676a:	b10b      	cbz	r3, 8006770 <__sflush_r+0x44>
 800676c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006774:	6a21      	ldr	r1, [r4, #32]
 8006776:	4628      	mov	r0, r5
 8006778:	47b0      	blx	r6
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	d106      	bne.n	800678e <__sflush_r+0x62>
 8006780:	6829      	ldr	r1, [r5, #0]
 8006782:	291d      	cmp	r1, #29
 8006784:	d82b      	bhi.n	80067de <__sflush_r+0xb2>
 8006786:	4a2a      	ldr	r2, [pc, #168]	@ (8006830 <__sflush_r+0x104>)
 8006788:	410a      	asrs	r2, r1
 800678a:	07d6      	lsls	r6, r2, #31
 800678c:	d427      	bmi.n	80067de <__sflush_r+0xb2>
 800678e:	2200      	movs	r2, #0
 8006790:	6062      	str	r2, [r4, #4]
 8006792:	04d9      	lsls	r1, r3, #19
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	d504      	bpl.n	80067a4 <__sflush_r+0x78>
 800679a:	1c42      	adds	r2, r0, #1
 800679c:	d101      	bne.n	80067a2 <__sflush_r+0x76>
 800679e:	682b      	ldr	r3, [r5, #0]
 80067a0:	b903      	cbnz	r3, 80067a4 <__sflush_r+0x78>
 80067a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80067a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067a6:	602f      	str	r7, [r5, #0]
 80067a8:	b1b9      	cbz	r1, 80067da <__sflush_r+0xae>
 80067aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067ae:	4299      	cmp	r1, r3
 80067b0:	d002      	beq.n	80067b8 <__sflush_r+0x8c>
 80067b2:	4628      	mov	r0, r5
 80067b4:	f7ff fa9a 	bl	8005cec <_free_r>
 80067b8:	2300      	movs	r3, #0
 80067ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80067bc:	e00d      	b.n	80067da <__sflush_r+0xae>
 80067be:	2301      	movs	r3, #1
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b0      	blx	r6
 80067c4:	4602      	mov	r2, r0
 80067c6:	1c50      	adds	r0, r2, #1
 80067c8:	d1c9      	bne.n	800675e <__sflush_r+0x32>
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0c6      	beq.n	800675e <__sflush_r+0x32>
 80067d0:	2b1d      	cmp	r3, #29
 80067d2:	d001      	beq.n	80067d8 <__sflush_r+0xac>
 80067d4:	2b16      	cmp	r3, #22
 80067d6:	d11e      	bne.n	8006816 <__sflush_r+0xea>
 80067d8:	602f      	str	r7, [r5, #0]
 80067da:	2000      	movs	r0, #0
 80067dc:	e022      	b.n	8006824 <__sflush_r+0xf8>
 80067de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e2:	b21b      	sxth	r3, r3
 80067e4:	e01b      	b.n	800681e <__sflush_r+0xf2>
 80067e6:	690f      	ldr	r7, [r1, #16]
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	d0f6      	beq.n	80067da <__sflush_r+0xae>
 80067ec:	0793      	lsls	r3, r2, #30
 80067ee:	680e      	ldr	r6, [r1, #0]
 80067f0:	bf08      	it	eq
 80067f2:	694b      	ldreq	r3, [r1, #20]
 80067f4:	600f      	str	r7, [r1, #0]
 80067f6:	bf18      	it	ne
 80067f8:	2300      	movne	r3, #0
 80067fa:	eba6 0807 	sub.w	r8, r6, r7
 80067fe:	608b      	str	r3, [r1, #8]
 8006800:	f1b8 0f00 	cmp.w	r8, #0
 8006804:	dde9      	ble.n	80067da <__sflush_r+0xae>
 8006806:	6a21      	ldr	r1, [r4, #32]
 8006808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800680a:	4643      	mov	r3, r8
 800680c:	463a      	mov	r2, r7
 800680e:	4628      	mov	r0, r5
 8006810:	47b0      	blx	r6
 8006812:	2800      	cmp	r0, #0
 8006814:	dc08      	bgt.n	8006828 <__sflush_r+0xfc>
 8006816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006828:	4407      	add	r7, r0
 800682a:	eba8 0800 	sub.w	r8, r8, r0
 800682e:	e7e7      	b.n	8006800 <__sflush_r+0xd4>
 8006830:	dfbffffe 	.word	0xdfbffffe

08006834 <_fflush_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
 800683c:	b913      	cbnz	r3, 8006844 <_fflush_r+0x10>
 800683e:	2500      	movs	r5, #0
 8006840:	4628      	mov	r0, r5
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	b118      	cbz	r0, 800684e <_fflush_r+0x1a>
 8006846:	6a03      	ldr	r3, [r0, #32]
 8006848:	b90b      	cbnz	r3, 800684e <_fflush_r+0x1a>
 800684a:	f7ff f90b 	bl	8005a64 <__sinit>
 800684e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0f3      	beq.n	800683e <_fflush_r+0xa>
 8006856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006858:	07d0      	lsls	r0, r2, #31
 800685a:	d404      	bmi.n	8006866 <_fflush_r+0x32>
 800685c:	0599      	lsls	r1, r3, #22
 800685e:	d402      	bmi.n	8006866 <_fflush_r+0x32>
 8006860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006862:	f7ff fa40 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 8006866:	4628      	mov	r0, r5
 8006868:	4621      	mov	r1, r4
 800686a:	f7ff ff5f 	bl	800672c <__sflush_r>
 800686e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006870:	07da      	lsls	r2, r3, #31
 8006872:	4605      	mov	r5, r0
 8006874:	d4e4      	bmi.n	8006840 <_fflush_r+0xc>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	059b      	lsls	r3, r3, #22
 800687a:	d4e1      	bmi.n	8006840 <_fflush_r+0xc>
 800687c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800687e:	f7ff fa33 	bl	8005ce8 <__retarget_lock_release_recursive>
 8006882:	e7dd      	b.n	8006840 <_fflush_r+0xc>

08006884 <__swbuf_r>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	460e      	mov	r6, r1
 8006888:	4614      	mov	r4, r2
 800688a:	4605      	mov	r5, r0
 800688c:	b118      	cbz	r0, 8006896 <__swbuf_r+0x12>
 800688e:	6a03      	ldr	r3, [r0, #32]
 8006890:	b90b      	cbnz	r3, 8006896 <__swbuf_r+0x12>
 8006892:	f7ff f8e7 	bl	8005a64 <__sinit>
 8006896:	69a3      	ldr	r3, [r4, #24]
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	071a      	lsls	r2, r3, #28
 800689e:	d501      	bpl.n	80068a4 <__swbuf_r+0x20>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	b943      	cbnz	r3, 80068b6 <__swbuf_r+0x32>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 f82a 	bl	8006900 <__swsetup_r>
 80068ac:	b118      	cbz	r0, 80068b6 <__swbuf_r+0x32>
 80068ae:	f04f 37ff 	mov.w	r7, #4294967295
 80068b2:	4638      	mov	r0, r7
 80068b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	6922      	ldr	r2, [r4, #16]
 80068ba:	1a98      	subs	r0, r3, r2
 80068bc:	6963      	ldr	r3, [r4, #20]
 80068be:	b2f6      	uxtb	r6, r6
 80068c0:	4283      	cmp	r3, r0
 80068c2:	4637      	mov	r7, r6
 80068c4:	dc05      	bgt.n	80068d2 <__swbuf_r+0x4e>
 80068c6:	4621      	mov	r1, r4
 80068c8:	4628      	mov	r0, r5
 80068ca:	f7ff ffb3 	bl	8006834 <_fflush_r>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d1ed      	bne.n	80068ae <__swbuf_r+0x2a>
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	6022      	str	r2, [r4, #0]
 80068de:	701e      	strb	r6, [r3, #0]
 80068e0:	6962      	ldr	r2, [r4, #20]
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d004      	beq.n	80068f2 <__swbuf_r+0x6e>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	07db      	lsls	r3, r3, #31
 80068ec:	d5e1      	bpl.n	80068b2 <__swbuf_r+0x2e>
 80068ee:	2e0a      	cmp	r6, #10
 80068f0:	d1df      	bne.n	80068b2 <__swbuf_r+0x2e>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f7ff ff9d 	bl	8006834 <_fflush_r>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d0d9      	beq.n	80068b2 <__swbuf_r+0x2e>
 80068fe:	e7d6      	b.n	80068ae <__swbuf_r+0x2a>

08006900 <__swsetup_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4b29      	ldr	r3, [pc, #164]	@ (80069a8 <__swsetup_r+0xa8>)
 8006904:	4605      	mov	r5, r0
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	460c      	mov	r4, r1
 800690a:	b118      	cbz	r0, 8006914 <__swsetup_r+0x14>
 800690c:	6a03      	ldr	r3, [r0, #32]
 800690e:	b90b      	cbnz	r3, 8006914 <__swsetup_r+0x14>
 8006910:	f7ff f8a8 	bl	8005a64 <__sinit>
 8006914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006918:	0719      	lsls	r1, r3, #28
 800691a:	d422      	bmi.n	8006962 <__swsetup_r+0x62>
 800691c:	06da      	lsls	r2, r3, #27
 800691e:	d407      	bmi.n	8006930 <__swsetup_r+0x30>
 8006920:	2209      	movs	r2, #9
 8006922:	602a      	str	r2, [r5, #0]
 8006924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	e033      	b.n	8006998 <__swsetup_r+0x98>
 8006930:	0758      	lsls	r0, r3, #29
 8006932:	d512      	bpl.n	800695a <__swsetup_r+0x5a>
 8006934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006936:	b141      	cbz	r1, 800694a <__swsetup_r+0x4a>
 8006938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800693c:	4299      	cmp	r1, r3
 800693e:	d002      	beq.n	8006946 <__swsetup_r+0x46>
 8006940:	4628      	mov	r0, r5
 8006942:	f7ff f9d3 	bl	8005cec <_free_r>
 8006946:	2300      	movs	r3, #0
 8006948:	6363      	str	r3, [r4, #52]	@ 0x34
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	2300      	movs	r3, #0
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f043 0308 	orr.w	r3, r3, #8
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	b94b      	cbnz	r3, 800697a <__swsetup_r+0x7a>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800696c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006970:	d003      	beq.n	800697a <__swsetup_r+0x7a>
 8006972:	4621      	mov	r1, r4
 8006974:	4628      	mov	r0, r5
 8006976:	f000 f8a5 	bl	8006ac4 <__smakebuf_r>
 800697a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697e:	f013 0201 	ands.w	r2, r3, #1
 8006982:	d00a      	beq.n	800699a <__swsetup_r+0x9a>
 8006984:	2200      	movs	r2, #0
 8006986:	60a2      	str	r2, [r4, #8]
 8006988:	6962      	ldr	r2, [r4, #20]
 800698a:	4252      	negs	r2, r2
 800698c:	61a2      	str	r2, [r4, #24]
 800698e:	6922      	ldr	r2, [r4, #16]
 8006990:	b942      	cbnz	r2, 80069a4 <__swsetup_r+0xa4>
 8006992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006996:	d1c5      	bne.n	8006924 <__swsetup_r+0x24>
 8006998:	bd38      	pop	{r3, r4, r5, pc}
 800699a:	0799      	lsls	r1, r3, #30
 800699c:	bf58      	it	pl
 800699e:	6962      	ldrpl	r2, [r4, #20]
 80069a0:	60a2      	str	r2, [r4, #8]
 80069a2:	e7f4      	b.n	800698e <__swsetup_r+0x8e>
 80069a4:	2000      	movs	r0, #0
 80069a6:	e7f7      	b.n	8006998 <__swsetup_r+0x98>
 80069a8:	20000018 	.word	0x20000018

080069ac <memmove>:
 80069ac:	4288      	cmp	r0, r1
 80069ae:	b510      	push	{r4, lr}
 80069b0:	eb01 0402 	add.w	r4, r1, r2
 80069b4:	d902      	bls.n	80069bc <memmove+0x10>
 80069b6:	4284      	cmp	r4, r0
 80069b8:	4623      	mov	r3, r4
 80069ba:	d807      	bhi.n	80069cc <memmove+0x20>
 80069bc:	1e43      	subs	r3, r0, #1
 80069be:	42a1      	cmp	r1, r4
 80069c0:	d008      	beq.n	80069d4 <memmove+0x28>
 80069c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ca:	e7f8      	b.n	80069be <memmove+0x12>
 80069cc:	4402      	add	r2, r0
 80069ce:	4601      	mov	r1, r0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d100      	bne.n	80069d6 <memmove+0x2a>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069de:	e7f7      	b.n	80069d0 <memmove+0x24>

080069e0 <_sbrk_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d06      	ldr	r5, [pc, #24]	@ (80069fc <_sbrk_r+0x1c>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fa fc40 	bl	8001270 <_sbrk>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_sbrk_r+0x1a>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_sbrk_r+0x1a>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	200002a0 	.word	0x200002a0

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a16:	4291      	cmp	r1, r2
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_realloc_r>:
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	4680      	mov	r8, r0
 8006a22:	4615      	mov	r5, r2
 8006a24:	460c      	mov	r4, r1
 8006a26:	b921      	cbnz	r1, 8006a32 <_realloc_r+0x16>
 8006a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	f7ff b9c9 	b.w	8005dc4 <_malloc_r>
 8006a32:	b92a      	cbnz	r2, 8006a40 <_realloc_r+0x24>
 8006a34:	f7ff f95a 	bl	8005cec <_free_r>
 8006a38:	2400      	movs	r4, #0
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	f000 f89e 	bl	8006b80 <_malloc_usable_size_r>
 8006a44:	4285      	cmp	r5, r0
 8006a46:	4606      	mov	r6, r0
 8006a48:	d802      	bhi.n	8006a50 <_realloc_r+0x34>
 8006a4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a4e:	d8f4      	bhi.n	8006a3a <_realloc_r+0x1e>
 8006a50:	4629      	mov	r1, r5
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff f9b6 	bl	8005dc4 <_malloc_r>
 8006a58:	4607      	mov	r7, r0
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d0ec      	beq.n	8006a38 <_realloc_r+0x1c>
 8006a5e:	42b5      	cmp	r5, r6
 8006a60:	462a      	mov	r2, r5
 8006a62:	4621      	mov	r1, r4
 8006a64:	bf28      	it	cs
 8006a66:	4632      	movcs	r2, r6
 8006a68:	f7ff ffca 	bl	8006a00 <memcpy>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff f93c 	bl	8005cec <_free_r>
 8006a74:	463c      	mov	r4, r7
 8006a76:	e7e0      	b.n	8006a3a <_realloc_r+0x1e>

08006a78 <__swhatbuf_r>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a80:	2900      	cmp	r1, #0
 8006a82:	b096      	sub	sp, #88	@ 0x58
 8006a84:	4615      	mov	r5, r2
 8006a86:	461e      	mov	r6, r3
 8006a88:	da0d      	bge.n	8006aa6 <__swhatbuf_r+0x2e>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a90:	f04f 0100 	mov.w	r1, #0
 8006a94:	bf14      	ite	ne
 8006a96:	2340      	movne	r3, #64	@ 0x40
 8006a98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	6031      	str	r1, [r6, #0]
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	b016      	add	sp, #88	@ 0x58
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	466a      	mov	r2, sp
 8006aa8:	f000 f848 	bl	8006b3c <_fstat_r>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	dbec      	blt.n	8006a8a <__swhatbuf_r+0x12>
 8006ab0:	9901      	ldr	r1, [sp, #4]
 8006ab2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ab6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006aba:	4259      	negs	r1, r3
 8006abc:	4159      	adcs	r1, r3
 8006abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ac2:	e7eb      	b.n	8006a9c <__swhatbuf_r+0x24>

08006ac4 <__smakebuf_r>:
 8006ac4:	898b      	ldrh	r3, [r1, #12]
 8006ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac8:	079d      	lsls	r5, r3, #30
 8006aca:	4606      	mov	r6, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	d507      	bpl.n	8006ae0 <__smakebuf_r+0x1c>
 8006ad0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	2301      	movs	r3, #1
 8006ada:	6163      	str	r3, [r4, #20]
 8006adc:	b003      	add	sp, #12
 8006ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae0:	ab01      	add	r3, sp, #4
 8006ae2:	466a      	mov	r2, sp
 8006ae4:	f7ff ffc8 	bl	8006a78 <__swhatbuf_r>
 8006ae8:	9f00      	ldr	r7, [sp, #0]
 8006aea:	4605      	mov	r5, r0
 8006aec:	4639      	mov	r1, r7
 8006aee:	4630      	mov	r0, r6
 8006af0:	f7ff f968 	bl	8005dc4 <_malloc_r>
 8006af4:	b948      	cbnz	r0, 8006b0a <__smakebuf_r+0x46>
 8006af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afa:	059a      	lsls	r2, r3, #22
 8006afc:	d4ee      	bmi.n	8006adc <__smakebuf_r+0x18>
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	f043 0302 	orr.w	r3, r3, #2
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	e7e2      	b.n	8006ad0 <__smakebuf_r+0xc>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	6020      	str	r0, [r4, #0]
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b1a:	b15b      	cbz	r3, 8006b34 <__smakebuf_r+0x70>
 8006b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 f81d 	bl	8006b60 <_isatty_r>
 8006b26:	b128      	cbz	r0, 8006b34 <__smakebuf_r+0x70>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	431d      	orrs	r5, r3
 8006b38:	81a5      	strh	r5, [r4, #12]
 8006b3a:	e7cf      	b.n	8006adc <__smakebuf_r+0x18>

08006b3c <_fstat_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	@ (8006b5c <_fstat_r+0x20>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	f7fa fb68 	bl	800121e <_fstat>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d102      	bne.n	8006b58 <_fstat_r+0x1c>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	b103      	cbz	r3, 8006b58 <_fstat_r+0x1c>
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	bf00      	nop
 8006b5c:	200002a0 	.word	0x200002a0

08006b60 <_isatty_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	@ (8006b7c <_isatty_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa fb67 	bl	800123e <_isatty>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_isatty_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_isatty_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	200002a0 	.word	0x200002a0

08006b80 <_malloc_usable_size_r>:
 8006b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b84:	1f18      	subs	r0, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bfbc      	itt	lt
 8006b8a:	580b      	ldrlt	r3, [r1, r0]
 8006b8c:	18c0      	addlt	r0, r0, r3
 8006b8e:	4770      	bx	lr

08006b90 <_init>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr

08006b9c <_fini>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr
